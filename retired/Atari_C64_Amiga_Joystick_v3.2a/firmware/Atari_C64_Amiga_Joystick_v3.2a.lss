
Atari_C64_Amiga_Joystick_v3.2a.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800100  00000b06  00000c1a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b06  00000000  00000000  00000114  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bootloader   0000075a  00007000  00007000  00000c50  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000057  00800136  00800136  000013aa  2**0
                  ALLOC
  4 .fuse         00000003  00820000  00820000  000013aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  5 .lock         00000001  00830000  00830000  000013ad  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .signature    00000003  00840000  00840000  000013ae  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_aranges 000000e8  00000000  00000000  000013b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000328  00000000  00000000  000014a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000012b6  00000000  00000000  000017c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000715  00000000  00000000  00002a7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000c55  00000000  00000000  00003193  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000110  00000000  00000000  00003de8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000006ec  00000000  00000000  00003ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000005c7  00000000  00000000  000045e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000118  00000000  00000000  00004bab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 97 00 	jmp	0x12e	; 0x12e <__ctors_end>
   4:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__vector_1>
   8:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
   c:	0c 94 16 05 	jmp	0xa2c	; 0xa2c <__vector_3>
  10:	0c 94 16 05 	jmp	0xa2c	; 0xa2c <__vector_3>
  14:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  18:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  1c:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  20:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  24:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  28:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  2c:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  30:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  34:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  38:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  3c:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  40:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  44:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  48:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  4c:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  50:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  54:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  58:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  5c:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  60:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  64:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>

00000068 <usbDescriptorString0>:
  68:	04 03 09 04                                         ....

0000006c <usbDescriptorStringVendor>:
  6c:	26 03 72 00 65 00 74 00 72 00 6f 00 6e 00 69 00     &.r.e.t.r.o.n.i.
  7c:	63 00 64 00 65 00 73 00 69 00 67 00 6e 00 2e 00     c.d.e.s.i.g.n...
  8c:	63 00 6f 00 6d 00                                   c.o.m.

00000092 <usbDescriptorStringDevice>:
  92:	3e 03 41 00 74 00 61 00 72 00 69 00 20 00 43 00     >.A.t.a.r.i. .C.
  a2:	36 00 34 00 20 00 41 00 6d 00 69 00 67 00 61 00     6.4. .A.m.i.g.a.
  b2:	20 00 4a 00 6f 00 79 00 73 00 74 00 69 00 63 00      .J.o.y.s.t.i.c.
  c2:	6b 00 20 00 76 00 33 00 2e 00 32 00 61 00           k. .v.3...2.a.

000000d0 <usbDescrDevice>:
  d0:	12 01 01 01 00 00 00 08 c0 16 dc 27 06 01 01 02     ...........'....
  e0:	00 01                                               ..

000000e2 <atariStyle_usbHidReportDescriptor>:
  e2:	05 01 09 05 a1 01 a1 00 05 01 09 30 09 31 15 00     ...........0.1..
  f2:	26 ff 00 75 08 95 02 81 02 05 09 19 01 29 03 15     &..u.........)..
 102:	00 25 01 95 08 75 01 81 02 09 00 15 00 26 ff 00     .%...u.......&..
 112:	75 08 95 01 b2 02 01 c0 c0                          u........

0000011b <atariStyle_usbDescrDevice>:
 11b:	12 01 01 01 00 00 00 08 c0 16 dc 27 06 01 01 02     ...........'....
 12b:	00 01 00                                            ...

0000012e <__ctors_end>:
 12e:	11 24       	eor	r1, r1
 130:	1f be       	out	0x3f, r1	; 63
 132:	cf ef       	ldi	r28, 0xFF	; 255
 134:	d8 e0       	ldi	r29, 0x08	; 8
 136:	de bf       	out	0x3e, r29	; 62
 138:	cd bf       	out	0x3d, r28	; 61

0000013a <__do_copy_data>:
 13a:	11 e0       	ldi	r17, 0x01	; 1
 13c:	a0 e0       	ldi	r26, 0x00	; 0
 13e:	b1 e0       	ldi	r27, 0x01	; 1
 140:	e6 e0       	ldi	r30, 0x06	; 6
 142:	fb e0       	ldi	r31, 0x0B	; 11
 144:	02 c0       	rjmp	.+4      	; 0x14a <.do_copy_data_start>

00000146 <.do_copy_data_loop>:
 146:	05 90       	lpm	r0, Z+
 148:	0d 92       	st	X+, r0

0000014a <.do_copy_data_start>:
 14a:	a6 33       	cpi	r26, 0x36	; 54
 14c:	b1 07       	cpc	r27, r17
 14e:	d9 f7       	brne	.-10     	; 0x146 <.do_copy_data_loop>

00000150 <__do_clear_bss>:
 150:	11 e0       	ldi	r17, 0x01	; 1
 152:	a6 e3       	ldi	r26, 0x36	; 54
 154:	b1 e0       	ldi	r27, 0x01	; 1
 156:	01 c0       	rjmp	.+2      	; 0x15a <.do_clear_bss_start>

00000158 <.do_clear_bss_loop>:
 158:	1d 92       	st	X+, r1

0000015a <.do_clear_bss_start>:
 15a:	ad 38       	cpi	r26, 0x8D	; 141
 15c:	b1 07       	cpc	r27, r17
 15e:	e1 f7       	brne	.-8      	; 0x158 <.do_clear_bss_loop>
 160:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <main>
 164:	0c 94 81 05 	jmp	0xb02	; 0xb02 <_exit>

00000168 <__bad_interrupt>:
 168:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000016c <usbCrc16>:
;   poly    r20+r21
;   scratch r23
;   resCrc  r24+r25 / r16+r17
;   ptr     X / Z
usbCrc16:
    mov     ptrL, argPtrL
 16c:	a8 2f       	mov	r26, r24
    mov     ptrH, argPtrH
 16e:	b9 2f       	mov	r27, r25
    ldi     resCrcL, 0
 170:	80 e0       	ldi	r24, 0x00	; 0
    ldi     resCrcH, 0
 172:	90 e0       	ldi	r25, 0x00	; 0
    ldi     polyL, lo8(0xa001)
 174:	41 e0       	ldi	r20, 0x01	; 1
    ldi     polyH, hi8(0xa001)
 176:	50 ea       	ldi	r21, 0xA0	; 160
    com     argLen      ; argLen = -argLen - 1: modified loop to ensure that carry is set
 178:	60 95       	com	r22
    ldi     bitCnt, 0   ; loop counter with starnd condition = end condition
 17a:	30 e0       	ldi	r19, 0x00	; 0
    rjmp    usbCrcLoopEntry
 17c:	09 c0       	rjmp	.+18     	; 0x190 <usbCrcLoopEntry>

0000017e <usbCrcByteLoop>:
usbCrcByteLoop:
    ld      byte, ptr+
 17e:	2d 91       	ld	r18, X+
    eor     resCrcL, byte
 180:	82 27       	eor	r24, r18

00000182 <usbCrcBitLoop>:
usbCrcBitLoop:
    ror     resCrcH     ; carry is always set here (see brcs jumps to here)
 182:	97 95       	ror	r25
    ror     resCrcL
 184:	87 95       	ror	r24
    brcs    usbCrcNoXor
 186:	10 f0       	brcs	.+4      	; 0x18c <usbCrcNoXor>
    eor     resCrcL, polyL
 188:	84 27       	eor	r24, r20
    eor     resCrcH, polyH
 18a:	95 27       	eor	r25, r21

0000018c <usbCrcNoXor>:
usbCrcNoXor:
    subi    bitCnt, 224 ; (8 * 224) % 256 = 0; this loop iterates 8 times
 18c:	30 5e       	subi	r19, 0xE0	; 224
    brcs    usbCrcBitLoop
 18e:	c8 f3       	brcs	.-14     	; 0x182 <usbCrcBitLoop>

00000190 <usbCrcLoopEntry>:
usbCrcLoopEntry:
    subi    argLen, -1
 190:	6f 5f       	subi	r22, 0xFF	; 255
    brcs    usbCrcByteLoop
 192:	a8 f3       	brcs	.-22     	; 0x17e <usbCrcByteLoop>

00000194 <usbCrcReady>:
usbCrcReady:
    ret
 194:	08 95       	ret

00000196 <usbCrc16Append>:

#endif /* USB_USE_FAST_CRC */

; extern unsigned usbCrc16Append(unsigned char *data, unsigned char len);
usbCrc16Append:
    rcall   usbCrc16
 196:	ea df       	rcall	.-44     	; 0x16c <usbCrc16>
    st      ptr+, resCrcL
 198:	8d 93       	st	X+, r24
    st      ptr+, resCrcH
 19a:	9d 93       	st	X+, r25
    ret
 19c:	08 95       	ret

0000019e <__vector_1>:
;max allowable interrupt latency: 34 cycles -> max 25 cycles interrupt disable
;max stack usage: [ret(2), YL, SREG, YH, shift, x1, x2, x3, cnt, x4] = 11 bytes
;Numbers in brackets are maximum cycles since SOF.
USB_INTR_VECTOR:
;order of registers pushed: YL, SREG [sofError], YH, shift, x1, x2, x3, cnt
    push    YL              ;2 [35] push only what is necessary to sync with edge ASAP
 19e:	cf 93       	push	r28
    in      YL, SREG        ;1 [37]
 1a0:	cf b7       	in	r28, 0x3f	; 63
    push    YL              ;2 [39]
 1a2:	cf 93       	push	r28

000001a4 <waitForJ>:
;sync up with J to K edge during sync pattern -- use fastest possible loops
;The first part waits at most 1 bit long since we must be in sync pattern.
;YL is guarenteed to be < 0x80 because I flag is clear. When we jump to
;waitForJ, ensure that this prerequisite is met.
waitForJ:
    inc     YL
 1a4:	c3 95       	inc	r28
    sbis    USBIN, USBMINUS
 1a6:	48 9b       	sbis	0x09, 0	; 9
    brne    waitForJ        ; just make sure we have ANY timeout
 1a8:	e9 f7       	brne	.-6      	; 0x1a4 <waitForJ>

000001aa <waitForK>:
waitForK:
;The following code results in a sampling window of 1/4 bit which meets the spec.
    sbis    USBIN, USBMINUS
 1aa:	48 9b       	sbis	0x09, 0	; 9
    rjmp    foundK
 1ac:	09 c0       	rjmp	.+18     	; 0x1c0 <foundK>
    sbis    USBIN, USBMINUS
 1ae:	48 9b       	sbis	0x09, 0	; 9
    rjmp    foundK
 1b0:	07 c0       	rjmp	.+14     	; 0x1c0 <foundK>
    sbis    USBIN, USBMINUS
 1b2:	48 9b       	sbis	0x09, 0	; 9
    rjmp    foundK
 1b4:	05 c0       	rjmp	.+10     	; 0x1c0 <foundK>
    sbis    USBIN, USBMINUS
 1b6:	48 9b       	sbis	0x09, 0	; 9
    rjmp    foundK
 1b8:	03 c0       	rjmp	.+6      	; 0x1c0 <foundK>
    sbis    USBIN, USBMINUS
 1ba:	48 9b       	sbis	0x09, 0	; 9
    rjmp    foundK
 1bc:	01 c0       	rjmp	.+2      	; 0x1c0 <foundK>
    sts     usbSofCount, YL
#endif  /* USB_COUNT_SOF */
#ifdef USB_SOF_HOOK
    USB_SOF_HOOK
#endif
    rjmp    sofError
 1be:	a3 c0       	rjmp	.+326    	; 0x306 <sofError>

000001c0 <foundK>:
foundK:
;{3, 5} after falling D- edge, average delay: 4 cycles [we want 4 for center sampling]
;we have 1 bit time for setup purposes, then sample again. Numbers in brackets
;are cycles from center of first sync (double K) bit after the instruction
    push    YH                  ;2 [2]
 1c0:	df 93       	push	r29
    lds     YL, usbInputBufOffset;2 [4]
 1c2:	c0 91 6f 01 	lds	r28, 0x016F
    clr     YH                  ;1 [5]
 1c6:	dd 27       	eor	r29, r29
    subi    YL, lo8(-(usbRxBuf));1 [6]
 1c8:	ca 58       	subi	r28, 0x8A	; 138
    sbci    YH, hi8(-(usbRxBuf));1 [7]
 1ca:	de 4f       	sbci	r29, 0xFE	; 254

    sbis    USBIN, USBMINUS ;1 [8] we want two bits K [sample 1 cycle too early]
 1cc:	48 9b       	sbis	0x09, 0	; 9
    rjmp    haveTwoBitsK    ;2 [10]
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <haveTwoBitsK>
    pop     YH              ;2 [11] undo the push from before
 1d0:	df 91       	pop	r29
    rjmp    waitForK        ;2 [13] this was not the end of sync, retry
 1d2:	eb cf       	rjmp	.-42     	; 0x1aa <waitForK>

000001d4 <haveTwoBitsK>:
haveTwoBitsK:
;----------------------------------------------------------------------------
; push more registers and initialize values while we sample the first bits:
;----------------------------------------------------------------------------
    push    shift           ;2 [16]
 1d4:	2f 93       	push	r18
    push    x1              ;2 [12]
 1d6:	0f 93       	push	r16
    push    x2              ;2 [14]
 1d8:	1f 93       	push	r17

    in      x1, USBIN       ;1 [17] <-- sample bit 0
 1da:	09 b1       	in	r16, 0x09	; 9
    ldi     shift, 0xff     ;1 [18]
 1dc:	2f ef       	ldi	r18, 0xFF	; 255
    bst     x1, USBMINUS    ;1 [19]
 1de:	00 fb       	bst	r16, 0
    bld     shift, 0        ;1 [20]
 1e0:	20 f9       	bld	r18, 0
    push    x3              ;2 [22]
 1e2:	4f 93       	push	r20
    push    cnt             ;2 [24]
 1e4:	3f 93       	push	r19
    
    in      x2, USBIN       ;1 [25] <-- sample bit 1
 1e6:	19 b1       	in	r17, 0x09	; 9
    ser     x3              ;1 [26] [inserted init instruction]
 1e8:	4f ef       	ldi	r20, 0xFF	; 255
    eor     x1, x2          ;1 [27]
 1ea:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;1 [28]
 1ec:	00 fb       	bst	r16, 0
    bld     shift, 1        ;1 [29]
 1ee:	21 f9       	bld	r18, 1
    ldi     cnt, USB_BUFSIZE;1 [30] [inserted init instruction]
 1f0:	3b e0       	ldi	r19, 0x0B	; 11
    rjmp    rxbit2          ;2 [32]
 1f2:	31 c0       	rjmp	.+98     	; 0x256 <rxbit2>

000001f4 <unstuff0>:
;----------------------------------------------------------------------------
; Receiver loop (numbers in brackets are cycles within byte after instr)
;----------------------------------------------------------------------------

unstuff0:               ;1 (branch taken)
    andi    x3, ~0x01   ;1 [15]
 1f4:	4e 7f       	andi	r20, 0xFE	; 254
    mov     x1, x2      ;1 [16] x2 contains last sampled (stuffed) bit
 1f6:	01 2f       	mov	r16, r17
    in      x2, USBIN   ;1 [17] <-- sample bit 1 again
 1f8:	19 b1       	in	r17, 0x09	; 9
    ori     shift, 0x01 ;1 [18]
 1fa:	21 60       	ori	r18, 0x01	; 1
    rjmp    didUnstuff0 ;2 [20]
 1fc:	28 c0       	rjmp	.+80     	; 0x24e <didUnstuff0>

000001fe <unstuff1>:

unstuff1:               ;1 (branch taken)
    mov     x2, x1      ;1 [21] x1 contains last sampled (stuffed) bit
 1fe:	10 2f       	mov	r17, r16
    andi    x3, ~0x02   ;1 [22]
 200:	4d 7f       	andi	r20, 0xFD	; 253
    ori     shift, 0x02 ;1 [23]
 202:	22 60       	ori	r18, 0x02	; 2
    nop                 ;1 [24]
 204:	00 00       	nop
    in      x1, USBIN   ;1 [25] <-- sample bit 2 again
 206:	09 b1       	in	r16, 0x09	; 9
    rjmp    didUnstuff1 ;2 [27]
 208:	29 c0       	rjmp	.+82     	; 0x25c <didUnstuff1>

0000020a <unstuff2>:

unstuff2:               ;1 (branch taken)
    andi    x3, ~0x04   ;1 [29]
 20a:	4b 7f       	andi	r20, 0xFB	; 251
    ori     shift, 0x04 ;1 [30]
 20c:	24 60       	ori	r18, 0x04	; 4
    mov     x1, x2      ;1 [31] x2 contains last sampled (stuffed) bit
 20e:	01 2f       	mov	r16, r17
    nop                 ;1 [32]
 210:	00 00       	nop
    in      x2, USBIN   ;1 [33] <-- sample bit 3
 212:	19 b1       	in	r17, 0x09	; 9
    rjmp    didUnstuff2 ;2 [35]
 214:	2b c0       	rjmp	.+86     	; 0x26c <didUnstuff2>

00000216 <unstuff3>:

unstuff3:               ;1 (branch taken)
    in      x2, USBIN   ;1 [34] <-- sample stuffed bit 3 [one cycle too late]
 216:	19 b1       	in	r17, 0x09	; 9
    andi    x3, ~0x08   ;1 [35]
 218:	47 7f       	andi	r20, 0xF7	; 247
    ori     shift, 0x08 ;1 [36]
 21a:	28 60       	ori	r18, 0x08	; 8
    rjmp    didUnstuff3 ;2 [38]
 21c:	2a c0       	rjmp	.+84     	; 0x272 <didUnstuff3>

0000021e <unstuff4>:

unstuff4:               ;1 (branch taken)
    andi    x3, ~0x10   ;1 [40]
 21e:	4f 7e       	andi	r20, 0xEF	; 239
    in      x1, USBIN   ;1 [41] <-- sample stuffed bit 4
 220:	09 b1       	in	r16, 0x09	; 9
    ori     shift, 0x10 ;1 [42]
 222:	20 61       	ori	r18, 0x10	; 16
    rjmp    didUnstuff4 ;2 [44]
 224:	2c c0       	rjmp	.+88     	; 0x27e <didUnstuff4>

00000226 <unstuff5>:

unstuff5:               ;1 (branch taken)
    andi    x3, ~0x20   ;1 [48]
 226:	4f 7d       	andi	r20, 0xDF	; 223
    in      x2, USBIN   ;1 [49] <-- sample stuffed bit 5
 228:	19 b1       	in	r17, 0x09	; 9
    ori     shift, 0x20 ;1 [50]
 22a:	20 62       	ori	r18, 0x20	; 32
    rjmp    didUnstuff5 ;2 [52]
 22c:	2f c0       	rjmp	.+94     	; 0x28c <didUnstuff5>

0000022e <unstuff6>:

unstuff6:               ;1 (branch taken)
    andi    x3, ~0x40   ;1 [56]
 22e:	4f 7b       	andi	r20, 0xBF	; 191
    in      x1, USBIN   ;1 [57] <-- sample stuffed bit 6
 230:	09 b1       	in	r16, 0x09	; 9
    ori     shift, 0x40 ;1 [58]
 232:	20 64       	ori	r18, 0x40	; 64
    rjmp    didUnstuff6 ;2 [60]
 234:	32 c0       	rjmp	.+100    	; 0x29a <didUnstuff6>

00000236 <rxLoop>:
; bit 4:    none
; bit 5:    none
; bit 6:    none
; bit 7:    jump, eor
rxLoop:
    eor     x3, shift   ;1 [0] reconstruct: x3 is 0 at bit locations we changed, 1 at others
 236:	42 27       	eor	r20, r18
    in      x1, USBIN   ;1 [1] <-- sample bit 0
 238:	09 b1       	in	r16, 0x09	; 9
    st      y+, x3      ;2 [3] store data
 23a:	49 93       	st	Y+, r20
    ser     x3          ;1 [4]
 23c:	4f ef       	ldi	r20, 0xFF	; 255
    nop                 ;1 [5]
 23e:	00 00       	nop
    eor     x2, x1      ;1 [6]
 240:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [7]
 242:	10 fb       	bst	r17, 0
    bld     shift, 0    ;1 [8]
 244:	20 f9       	bld	r18, 0
    in      x2, USBIN   ;1 [9] <-- sample bit 1 (or possibly bit 0 stuffed)
 246:	19 b1       	in	r17, 0x09	; 9
    andi    x2, USBMASK ;1 [10]
 248:	15 70       	andi	r17, 0x05	; 5
    breq    se0         ;1 [11] SE0 check for bit 1
 24a:	c9 f1       	breq	.+114    	; 0x2be <se0>
    andi    shift, 0xf9 ;1 [12]
 24c:	29 7f       	andi	r18, 0xF9	; 249

0000024e <didUnstuff0>:
didUnstuff0:
    breq    unstuff0    ;1 [13]
 24e:	91 f2       	breq	.-92     	; 0x1f4 <unstuff0>
    eor     x1, x2      ;1 [14]
 250:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [15]
 252:	00 fb       	bst	r16, 0
    bld     shift, 1    ;1 [16]
 254:	21 f9       	bld	r18, 1

00000256 <rxbit2>:
rxbit2:
    in      x1, USBIN   ;1 [17] <-- sample bit 2 (or possibly bit 1 stuffed)
 256:	09 b1       	in	r16, 0x09	; 9
    andi    shift, 0xf3 ;1 [18]
 258:	23 7f       	andi	r18, 0xF3	; 243
    breq    unstuff1    ;1 [19] do remaining work for bit 1
 25a:	89 f2       	breq	.-94     	; 0x1fe <unstuff1>

0000025c <didUnstuff1>:
didUnstuff1:
    subi    cnt, 1      ;1 [20]
 25c:	31 50       	subi	r19, 0x01	; 1
    brcs    overflow    ;1 [21] loop control
 25e:	58 f1       	brcs	.+86     	; 0x2b6 <overflow>
    eor     x2, x1      ;1 [22]
 260:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [23]
 262:	10 fb       	bst	r17, 0
    bld     shift, 2    ;1 [24]
 264:	22 f9       	bld	r18, 2
    in      x2, USBIN   ;1 [25] <-- sample bit 3 (or possibly bit 2 stuffed)
 266:	19 b1       	in	r17, 0x09	; 9
    andi    shift, 0xe7 ;1 [26]
 268:	27 7e       	andi	r18, 0xE7	; 231
    breq    unstuff2    ;1 [27]
 26a:	79 f2       	breq	.-98     	; 0x20a <unstuff2>

0000026c <didUnstuff2>:
didUnstuff2:
    eor     x1, x2      ;1 [28]
 26c:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [29]
 26e:	00 fb       	bst	r16, 0
    bld     shift, 3    ;1 [30]
 270:	23 f9       	bld	r18, 3

00000272 <didUnstuff3>:
didUnstuff3:
    andi    shift, 0xcf ;1 [31]
 272:	2f 7c       	andi	r18, 0xCF	; 207
    breq    unstuff3    ;1 [32]
 274:	81 f2       	breq	.-96     	; 0x216 <unstuff3>
    in      x1, USBIN   ;1 [33] <-- sample bit 4
 276:	09 b1       	in	r16, 0x09	; 9
    eor     x2, x1      ;1 [34]
 278:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [35]
 27a:	10 fb       	bst	r17, 0
    bld     shift, 4    ;1 [36]
 27c:	24 f9       	bld	r18, 4

0000027e <didUnstuff4>:
didUnstuff4:
    andi    shift, 0x9f ;1 [37]
 27e:	2f 79       	andi	r18, 0x9F	; 159
    breq    unstuff4    ;1 [38]
 280:	71 f2       	breq	.-100    	; 0x21e <unstuff4>
    nop2                ;2 [40]
 282:	00 c0       	rjmp	.+0      	; 0x284 <didUnstuff4+0x6>
    in      x2, USBIN   ;1 [41] <-- sample bit 5
 284:	19 b1       	in	r17, 0x09	; 9
    eor     x1, x2      ;1 [42]
 286:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [43]
 288:	00 fb       	bst	r16, 0
    bld     shift, 5    ;1 [44]
 28a:	25 f9       	bld	r18, 5

0000028c <didUnstuff5>:
didUnstuff5:
    andi    shift, 0x3f ;1 [45]
 28c:	2f 73       	andi	r18, 0x3F	; 63
    breq    unstuff5    ;1 [46]
 28e:	59 f2       	breq	.-106    	; 0x226 <unstuff5>
    nop2                ;2 [48]
 290:	00 c0       	rjmp	.+0      	; 0x292 <didUnstuff5+0x6>
    in      x1, USBIN   ;1 [49] <-- sample bit 6
 292:	09 b1       	in	r16, 0x09	; 9
    eor     x2, x1      ;1 [50]
 294:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [51]
 296:	10 fb       	bst	r17, 0
    bld     shift, 6    ;1 [52]
 298:	26 f9       	bld	r18, 6

0000029a <didUnstuff6>:
didUnstuff6:
    cpi     shift, 0x02 ;1 [53]
 29a:	22 30       	cpi	r18, 0x02	; 2
    brlo    unstuff6    ;1 [54]
 29c:	40 f2       	brcs	.-112    	; 0x22e <unstuff6>
    nop2                ;2 [56]
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <didUnstuff6+0x6>
    in      x2, USBIN   ;1 [57] <-- sample bit 7
 2a0:	19 b1       	in	r17, 0x09	; 9
    eor     x1, x2      ;1 [58]
 2a2:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [59]
 2a4:	00 fb       	bst	r16, 0
    bld     shift, 7    ;1 [60]
 2a6:	27 f9       	bld	r18, 7

000002a8 <didUnstuff7>:
didUnstuff7:
    cpi     shift, 0x04 ;1 [61]
 2a8:	24 30       	cpi	r18, 0x04	; 4
    brsh    rxLoop      ;2 [63] loop control
 2aa:	28 f6       	brcc	.-118    	; 0x236 <rxLoop>

000002ac <unstuff7>:
unstuff7:
    andi    x3, ~0x80   ;1 [63]
 2ac:	4f 77       	andi	r20, 0x7F	; 127
    ori     shift, 0x80 ;1 [64]
 2ae:	20 68       	ori	r18, 0x80	; 128
    in      x2, USBIN   ;1 [65] <-- sample stuffed bit 7
 2b0:	19 b1       	in	r17, 0x09	; 9
    nop                 ;1 [66]
 2b2:	00 00       	nop
    rjmp    didUnstuff7 ;2 [68]
 2b4:	f9 cf       	rjmp	.-14     	; 0x2a8 <didUnstuff7>

000002b6 <overflow>:
*/

#define token   x1

overflow:
    ldi     x2, 1<<USB_INTR_PENDING_BIT
 2b6:	11 e0       	ldi	r17, 0x01	; 1
    USB_STORE_PENDING(x2)       ; clear any pending interrupts
 2b8:	1c bb       	out	0x1c, r17	; 28

000002ba <ignorePacket>:
ignorePacket:
    clr     token
 2ba:	00 27       	eor	r16, r16
    rjmp    storeTokenAndReturn
 2bc:	19 c0       	rjmp	.+50     	; 0x2f0 <handleSetupOrOut>

000002be <se0>:
; Processing of received packet (numbers in brackets are cycles after center of SE0)
;----------------------------------------------------------------------------
;This is the only non-error exit point for the software receiver loop
;we don't check any CRCs here because there is no time left.
se0:
    subi    cnt, USB_BUFSIZE    ;[5]
 2be:	3b 50       	subi	r19, 0x0B	; 11
    neg     cnt                 ;[6]
 2c0:	31 95       	neg	r19
    sub     YL, cnt             ;[7]
 2c2:	c3 1b       	sub	r28, r19
    sbci    YH, 0               ;[8]
 2c4:	d0 40       	sbci	r29, 0x00	; 0
    ldi     x2, 1<<USB_INTR_PENDING_BIT ;[9]
 2c6:	11 e0       	ldi	r17, 0x01	; 1
    USB_STORE_PENDING(x2)       ;[10] clear pending intr and check flag later. SE0 should be over.
 2c8:	1c bb       	out	0x1c, r17	; 28
    ld      token, y            ;[11]
 2ca:	08 81       	ld	r16, Y
    cpi     token, USBPID_DATA0 ;[13]
 2cc:	03 3c       	cpi	r16, 0xC3	; 195
    breq    handleData          ;[14]
 2ce:	f9 f0       	breq	.+62     	; 0x30e <handleData>
    cpi     token, USBPID_DATA1 ;[15]
 2d0:	0b 34       	cpi	r16, 0x4B	; 75
    breq    handleData          ;[16]
 2d2:	e9 f0       	breq	.+58     	; 0x30e <handleData>
    lds     shift, usbDeviceAddr;[17]
 2d4:	20 91 6d 01 	lds	r18, 0x016D
    ldd     x2, y+1             ;[19] ADDR and 1 bit endpoint number
 2d8:	19 81       	ldd	r17, Y+1	; 0x01
    lsl     x2                  ;[21] shift out 1 bit endpoint number
 2da:	11 0f       	add	r17, r17
    cpse    x2, shift           ;[22]
 2dc:	12 13       	cpse	r17, r18
    rjmp    ignorePacket        ;[23]
 2de:	ed cf       	rjmp	.-38     	; 0x2ba <ignorePacket>
/* only compute endpoint number in x3 if required later */
#if USB_CFG_HAVE_INTRIN_ENDPOINT || USB_CFG_IMPLEMENT_FN_WRITEOUT
    ldd     x3, y+2             ;[24] endpoint number + crc
 2e0:	4a 81       	ldd	r20, Y+2	; 0x02
    rol     x3                  ;[26] shift in LSB of endpoint
 2e2:	44 1f       	adc	r20, r20
#endif
    cpi     token, USBPID_IN    ;[27]
 2e4:	09 36       	cpi	r16, 0x69	; 105
    breq    handleIn            ;[28]
 2e6:	41 f1       	breq	.+80     	; 0x338 <handleIn>
    cpi     token, USBPID_SETUP ;[29]
 2e8:	0d 32       	cpi	r16, 0x2D	; 45
    breq    handleSetupOrOut    ;[30]
 2ea:	11 f0       	breq	.+4      	; 0x2f0 <handleSetupOrOut>
    cpi     token, USBPID_OUT   ;[31]
 2ec:	01 3e       	cpi	r16, 0xE1	; 225
    brne    ignorePacket        ;[32] must be ack, nak or whatever
 2ee:	29 f7       	brne	.-54     	; 0x2ba <ignorePacket>

000002f0 <handleSetupOrOut>:
    andi    x3, 0xf             ;[32]
    breq    storeTokenAndReturn ;[33]
    mov     token, x3           ;[34] indicate that this is endpoint x OUT
#endif
storeTokenAndReturn:
    sts     usbCurrentTok, token;[35]
 2f0:	00 93 74 01 	sts	0x0174, r16

000002f4 <doReturn>:
doReturn:
    POP_STANDARD                ;[37] 12...16 cycles
 2f4:	3f 91       	pop	r19
 2f6:	4f 91       	pop	r20
 2f8:	1f 91       	pop	r17
 2fa:	0f 91       	pop	r16
 2fc:	2f 91       	pop	r18
 2fe:	df 91       	pop	r29
    USB_LOAD_PENDING(YL)        ;[49]
 300:	cc b3       	in	r28, 0x1c	; 28
    sbrc    YL, USB_INTR_PENDING_BIT;[50] check whether data is already arriving
 302:	c0 fd       	sbrc	r28, 0
    rjmp    waitForJ            ;[51] save the pops and pushes -- a new interrupt is already pending
 304:	4f cf       	rjmp	.-354    	; 0x1a4 <waitForJ>

00000306 <sofError>:
sofError:
    POP_RETI                    ;macro call
 306:	cf 91       	pop	r28
 308:	cf bf       	out	0x3f, r28	; 63
 30a:	cf 91       	pop	r28
    reti
 30c:	18 95       	reti

0000030e <handleData>:

handleData:
#if USB_CFG_CHECK_CRC
    CRC_CLEANUP_AND_CHECK       ; jumps to ignorePacket if CRC error
#endif
    lds     shift, usbCurrentTok;[18]
 30e:	20 91 74 01 	lds	r18, 0x0174
    tst     shift               ;[20]
 312:	22 23       	and	r18, r18
    breq    doReturn            ;[21]
 314:	79 f3       	breq	.-34     	; 0x2f4 <doReturn>
    lds     x2, usbRxLen        ;[22]
 316:	10 91 72 01 	lds	r17, 0x0172
    tst     x2                  ;[24]
 31a:	11 23       	and	r17, r17
    brne    sendNakAndReti      ;[25]
 31c:	69 f5       	brne	.+90     	; 0x378 <sendNakAndReti>
; 2006-03-11: The following two lines fix a problem where the device was not
; recognized if usbPoll() was called less frequently than once every 4 ms.
    cpi     cnt, 4              ;[26] zero sized data packets are status phase only -- ignore and ack
 31e:	34 30       	cpi	r19, 0x04	; 4
    brmi    sendAckAndReti      ;[27] keep rx buffer clean -- we must not NAK next SETUP
 320:	6a f1       	brmi	.+90     	; 0x37c <sendAckAndReti>
#if USB_CFG_CHECK_DATA_TOGGLING
    sts     usbCurrentDataToken, token  ; store for checking by C code
#endif
    sts     usbRxLen, cnt       ;[28] store received data, swap buffers
 322:	30 93 72 01 	sts	0x0172, r19
    sts     usbRxToken, shift   ;[30]
 326:	20 93 6e 01 	sts	0x016E, r18
    lds     x2, usbInputBufOffset;[32] swap buffers
 32a:	10 91 6f 01 	lds	r17, 0x016F
    ldi     cnt, USB_BUFSIZE    ;[34]
 32e:	3b e0       	ldi	r19, 0x0B	; 11
    sub     cnt, x2             ;[35]
 330:	31 1b       	sub	r19, r17
    sts     usbInputBufOffset, cnt;[36] buffers now swapped
 332:	30 93 6f 01 	sts	0x016F, r19
    rjmp    sendAckAndReti      ;[38] 40 + 17 = 57 until SOP
 336:	22 c0       	rjmp	.+68     	; 0x37c <sendAckAndReti>

00000338 <handleIn>:

handleIn:
;We don't send any data as long as the C code has not processed the current
;input data and potentially updated the output data. That's more efficient
;in terms of code size than clearing the tx buffers when a packet is received.
    lds     x1, usbRxLen        ;[30]
 338:	00 91 72 01 	lds	r16, 0x0172
    cpi     x1, 1               ;[32] negative values are flow control, 0 means "buffer free"
 33c:	01 30       	cpi	r16, 0x01	; 1
    brge    sendNakAndReti      ;[33] unprocessed input packet?
 33e:	e4 f4       	brge	.+56     	; 0x378 <sendNakAndReti>
    ldi     x1, USBPID_NAK      ;[34] prepare value for usbTxLen
 340:	0a e5       	ldi	r16, 0x5A	; 90
#if USB_CFG_HAVE_INTRIN_ENDPOINT
    andi    x3, 0xf             ;[35] x3 contains endpoint
 342:	4f 70       	andi	r20, 0x0F	; 15
#if USB_CFG_SUPPRESS_INTR_CODE
    brne    sendNakAndReti      ;[36]
#else
    brne    handleIn1           ;[36]
 344:	49 f4       	brne	.+18     	; 0x358 <handleIn1>
#endif
#endif
    lds     cnt, usbTxLen       ;[37]
 346:	30 91 00 01 	lds	r19, 0x0100
    sbrc    cnt, 4              ;[39] all handshake tokens have bit 4 set
 34a:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[40] 42 + 16 = 58 until SOP
 34c:	19 c0       	rjmp	.+50     	; 0x380 <sendCntAndReti>
    sts     usbTxLen, x1        ;[41] x1 == USBPID_NAK from above
 34e:	00 93 00 01 	sts	0x0100, r16
    ldi     YL, lo8(usbTxBuf)   ;[43]
 352:	c6 e5       	ldi	r28, 0x56	; 86
    ldi     YH, hi8(usbTxBuf)   ;[44]
 354:	d1 e0       	ldi	r29, 0x01	; 1
    rjmp    usbSendAndReti      ;[45] 57 + 12 = 59 until SOP
 356:	18 c0       	rjmp	.+48     	; 0x388 <usbSendAndReti>

00000358 <handleIn1>:
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
; 2006-06-10 as suggested by O.Tamura: support second INTR IN / BULK IN endpoint
    cpi     x3, USB_CFG_EP3_NUMBER;[38]
    breq    handleIn3           ;[39]
#endif
    lds     cnt, usbTxLen1      ;[40]
 358:	30 91 61 01 	lds	r19, 0x0161
    sbrc    cnt, 4              ;[42] all handshake tokens have bit 4 set
 35c:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[43] 47 + 16 = 63 until SOP
 35e:	10 c0       	rjmp	.+32     	; 0x380 <sendCntAndReti>
    sts     usbTxLen1, x1       ;[44] x1 == USBPID_NAK from above
 360:	00 93 61 01 	sts	0x0161, r16
    ldi     YL, lo8(usbTxBuf1)  ;[46]
 364:	c2 e6       	ldi	r28, 0x62	; 98
    ldi     YH, hi8(usbTxBuf1)  ;[47]
 366:	d1 e0       	ldi	r29, 0x01	; 1
    rjmp    usbSendAndReti      ;[48] 50 + 12 = 62 until SOP
 368:	0f c0       	rjmp	.+30     	; 0x388 <usbSendAndReti>

0000036a <stuffN1Delay>:
;----------------------------------------------------------------------------

txByteLoop:
txBitloop:
stuffN1Delay:                   ;     [03]
    ror     shift               ;[-5] [11] [59]
 36a:	27 95       	ror	r18
    brcc    doExorN1            ;[-4]      [60]
 36c:	a8 f4       	brcc	.+42     	; 0x398 <doExorN1>
    subi    x4, 1               ;[-3]
 36e:	51 50       	subi	r21, 0x01	; 1
    brne    commonN1            ;[-2]
 370:	a9 f4       	brne	.+42     	; 0x39c <commonN1>
    lsl     shift               ;[-1] compensate ror after rjmp stuffDelay
 372:	22 0f       	add	r18, r18
    nop                         ;[00] stuffing consists of just waiting 8 cycles
 374:	00 00       	nop
    rjmp    stuffN1Delay        ;[01] after ror, C bit is reliably clear
 376:	f9 cf       	rjmp	.-14     	; 0x36a <stuffN1Delay>

00000378 <sendNakAndReti>:

sendNakAndReti:                 ;0 [-19] 19 cycles until SOP
    ldi     x3, USBPID_NAK      ;1 [-18]
 378:	4a e5       	ldi	r20, 0x5A	; 90
    rjmp    usbSendX3           ;2 [-16]
 37a:	03 c0       	rjmp	.+6      	; 0x382 <usbSendX3>

0000037c <sendAckAndReti>:
sendAckAndReti:                 ;0 [-19] 19 cycles until SOP
    ldi     x3, USBPID_ACK      ;1 [-18]
 37c:	42 ed       	ldi	r20, 0xD2	; 210
    rjmp    usbSendX3           ;2 [-16]
 37e:	01 c0       	rjmp	.+2      	; 0x382 <usbSendX3>

00000380 <sendCntAndReti>:
sendCntAndReti:                 ;0 [-17] 17 cycles until SOP
    mov     x3, cnt             ;1 [-16]
 380:	43 2f       	mov	r20, r19

00000382 <usbSendX3>:
usbSendX3:                      ;0 [-16]
    ldi     YL, 20              ;1 [-15] 'x3' is R20
 382:	c4 e1       	ldi	r28, 0x14	; 20
    ldi     YH, 0               ;1 [-14]
 384:	d0 e0       	ldi	r29, 0x00	; 0
    ldi     cnt, 2              ;1 [-13]
 386:	32 e0       	ldi	r19, 0x02	; 2

00000388 <usbSendAndReti>:
;pointer to data in 'Y'
;number of bytes in 'cnt' -- including sync byte
;uses: x1...x2, x4, shift, cnt, Y [x1 = mirror USBOUT, x2 = USBMASK, x4 = bitstuff cnt]
;Numbers in brackets are time since first bit of sync pattern is sent (start of instruction)
usbSendAndReti:
    in      x2, USBDDR          ;[-12] 12 cycles until SOP
 388:	1a b1       	in	r17, 0x0a	; 10
    ori     x2, USBMASK         ;[-11]
 38a:	15 60       	ori	r17, 0x05	; 5
    sbi     USBOUT, USBMINUS    ;[-10] prepare idle state; D+ and D- must have been 0 (no pullups)
 38c:	58 9a       	sbi	0x0b, 0	; 11
    out     USBDDR, x2          ;[-8] <--- acquire bus
 38e:	1a b9       	out	0x0a, r17	; 10
    in      x1, USBOUT          ;[-7] port mirror for tx loop
 390:	0b b1       	in	r16, 0x0b	; 11
    ldi     shift, 0x40         ;[-6] sync byte is first byte sent (we enter loop after ror)
 392:	20 e4       	ldi	r18, 0x40	; 64
    ldi     x2, USBMASK         ;[-5]
 394:	15 e0       	ldi	r17, 0x05	; 5
    push    x4                  ;[-4]
 396:	5f 93       	push	r21

00000398 <doExorN1>:
doExorN1:
    eor     x1, x2              ;[-2] [06] [62]
 398:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[-1] [07] [63]
 39a:	56 e0       	ldi	r21, 0x06	; 6

0000039c <commonN1>:
commonN1:
stuffN2Delay:
    out     USBOUT, x1          ;[00] [08] [64] <--- set bit
 39c:	0b b9       	out	0x0b, r16	; 11
    ror     shift               ;[01]
 39e:	27 95       	ror	r18
    brcc    doExorN2            ;[02]
 3a0:	20 f4       	brcc	.+8      	; 0x3aa <doExorN2>
    subi    x4, 1               ;[03]
 3a2:	51 50       	subi	r21, 0x01	; 1
    brne    commonN2            ;[04]
 3a4:	21 f4       	brne	.+8      	; 0x3ae <commonN2>
    lsl     shift               ;[05] compensate ror after rjmp stuffDelay
 3a6:	22 0f       	add	r18, r18
    rjmp    stuffN2Delay        ;[06] after ror, C bit is reliably clear
 3a8:	f9 cf       	rjmp	.-14     	; 0x39c <commonN1>

000003aa <doExorN2>:
doExorN2:
    eor     x1, x2              ;[04] [12]
 3aa:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[05] [13]
 3ac:	56 e0       	ldi	r21, 0x06	; 6

000003ae <commonN2>:
commonN2:
    nop                         ;[06] [14]
 3ae:	00 00       	nop
    subi    cnt, 171            ;[07] [15] trick: (3 * 171) & 0xff = 1
 3b0:	3b 5a       	subi	r19, 0xAB	; 171
    out     USBOUT, x1          ;[08] [16] <--- set bit
 3b2:	0b b9       	out	0x0b, r16	; 11
    brcs    txBitloop           ;[09]      [25] [41]
 3b4:	d0 f2       	brcs	.-76     	; 0x36a <stuffN1Delay>

000003b6 <stuff6Delay>:

stuff6Delay:
    ror     shift               ;[42] [50]
 3b6:	27 95       	ror	r18
    brcc    doExor6             ;[43]
 3b8:	28 f4       	brcc	.+10     	; 0x3c4 <doExor6>
    subi    x4, 1               ;[44]
 3ba:	51 50       	subi	r21, 0x01	; 1
    brne    common6             ;[45]
 3bc:	29 f4       	brne	.+10     	; 0x3c8 <common6>
    lsl     shift               ;[46] compensate ror after rjmp stuffDelay
 3be:	22 0f       	add	r18, r18
    nop                         ;[47] stuffing consists of just waiting 8 cycles
 3c0:	00 00       	nop
    rjmp    stuff6Delay         ;[48] after ror, C bit is reliably clear
 3c2:	f9 cf       	rjmp	.-14     	; 0x3b6 <stuff6Delay>

000003c4 <doExor6>:
doExor6:
    eor     x1, x2              ;[45] [53]
 3c4:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[46]
 3c6:	56 e0       	ldi	r21, 0x06	; 6

000003c8 <common6>:
common6:
stuff7Delay:
    ror     shift               ;[47] [55]
 3c8:	27 95       	ror	r18
    out     USBOUT, x1          ;[48] <--- set bit
 3ca:	0b b9       	out	0x0b, r16	; 11
    brcc    doExor7             ;[49]
 3cc:	20 f4       	brcc	.+8      	; 0x3d6 <doExor7>
    subi    x4, 1               ;[50]
 3ce:	51 50       	subi	r21, 0x01	; 1
    brne    common7             ;[51]
 3d0:	21 f4       	brne	.+8      	; 0x3da <common7>
    lsl     shift               ;[52] compensate ror after rjmp stuffDelay
 3d2:	22 0f       	add	r18, r18
    rjmp    stuff7Delay         ;[53] after ror, C bit is reliably clear
 3d4:	f9 cf       	rjmp	.-14     	; 0x3c8 <common6>

000003d6 <doExor7>:
doExor7:
    eor     x1, x2              ;[51] [59]
 3d6:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[52]
 3d8:	56 e0       	ldi	r21, 0x06	; 6

000003da <common7>:
common7:
    ld      shift, y+           ;[53]
 3da:	29 91       	ld	r18, Y+
    tst     cnt                 ;[55]
 3dc:	33 23       	and	r19, r19
    out     USBOUT, x1          ;[56] <--- set bit
 3de:	0b b9       	out	0x0b, r16	; 11
    brne    txByteLoop          ;[57]
 3e0:	21 f6       	brne	.-120    	; 0x36a <stuffN1Delay>

;make SE0:
    cbr     x1, USBMASK         ;[58] prepare SE0 [spec says EOP may be 15 to 18 cycles]
 3e2:	0a 7f       	andi	r16, 0xFA	; 250
    lds     x2, usbNewDeviceAddr;[59]
 3e4:	10 91 73 01 	lds	r17, 0x0173
    lsl     x2                  ;[61] we compare with left shifted address
 3e8:	11 0f       	add	r17, r17
    subi    YL, 2 + 20          ;[62] Only assign address on data packets, not ACK/NAK in x3
 3ea:	c6 51       	subi	r28, 0x16	; 22
    sbci    YH, 0               ;[63]
 3ec:	d0 40       	sbci	r29, 0x00	; 0
    out     USBOUT, x1          ;[00] <-- out SE0 -- from now 2 bits = 16 cycles until bus idle
 3ee:	0b b9       	out	0x0b, r16	; 11
;2006-03-06: moved transfer of new address to usbDeviceAddr from C-Code to asm:
;set address only after data packet was sent, not after handshake
    breq    skipAddrAssign      ;[01]
 3f0:	11 f0       	breq	.+4      	; 0x3f6 <skipAddrAssign>
    sts     usbDeviceAddr, x2   ; if not skipped: SE0 is one cycle longer
 3f2:	10 93 6d 01 	sts	0x016D, r17

000003f6 <skipAddrAssign>:
skipAddrAssign:
;end of usbDeviceAddress transfer
    ldi     x2, 1<<USB_INTR_PENDING_BIT;[03] int0 occurred during TX -- clear pending flag
 3f6:	11 e0       	ldi	r17, 0x01	; 1
    USB_STORE_PENDING(x2)       ;[04]
 3f8:	1c bb       	out	0x1c, r17	; 28
    ori     x1, USBIDLE         ;[05]
 3fa:	01 60       	ori	r16, 0x01	; 1
    in      x2, USBDDR          ;[06]
 3fc:	1a b1       	in	r17, 0x0a	; 10
    cbr     x2, USBMASK         ;[07] set both pins to input
 3fe:	1a 7f       	andi	r17, 0xFA	; 250
    mov     x3, x1              ;[08]
 400:	40 2f       	mov	r20, r16
    cbr     x3, USBMASK         ;[09] configure no pullup on both pins
 402:	4a 7f       	andi	r20, 0xFA	; 250
    pop     x4                  ;[10]
 404:	5f 91       	pop	r21
    nop2                        ;[12]
 406:	00 c0       	rjmp	.+0      	; 0x408 <skipAddrAssign+0x12>
    nop2                        ;[14]
 408:	00 c0       	rjmp	.+0      	; 0x40a <skipAddrAssign+0x14>
    out     USBOUT, x1          ;[16] <-- out J (idle) -- end of SE0 (EOP signal)
 40a:	0b b9       	out	0x0b, r16	; 11
    out     USBDDR, x2          ;[17] <-- release bus now
 40c:	1a b9       	out	0x0a, r17	; 10
    out     USBOUT, x3          ;[18] <-- ensure no pull-up resistors are active
 40e:	4b b9       	out	0x0b, r20	; 11
    rjmp    doReturn
 410:	71 cf       	rjmp	.-286    	; 0x2f4 <doReturn>

00000412 <usbInit>:
/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
#if USB_INTR_CFG_SET != 0
    USB_INTR_CFG |= USB_INTR_CFG_SET;
 412:	e9 e6       	ldi	r30, 0x69	; 105
 414:	f0 e0       	ldi	r31, 0x00	; 0
 416:	80 81       	ld	r24, Z
 418:	82 60       	ori	r24, 0x02	; 2
 41a:	80 83       	st	Z, r24
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
 41c:	e8 9a       	sbi	0x1d, 0	; 29
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 41e:	8b e4       	ldi	r24, 0x4B	; 75
 420:	80 93 62 01 	sts	0x0162, r24
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
    usbResetDataToggling();
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    usbTxLen1 = USBPID_NAK;
 424:	8a e5       	ldi	r24, 0x5A	; 90
 426:	80 93 61 01 	sts	0x0161, r24
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
    usbTxLen3 = USBPID_NAK;
#endif
#endif
}
 42a:	08 95       	ret

0000042c <usbPoll>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
 42c:	1f 93       	push	r17
 42e:	cf 93       	push	r28
 430:	df 93       	push	r29
schar   len;
uchar   i;

    len = usbRxLen - 3;
 432:	60 91 72 01 	lds	r22, 0x0172
 436:	63 50       	subi	r22, 0x03	; 3
    if(len >= 0){
 438:	67 fd       	sbrc	r22, 7
 43a:	bb c0       	rjmp	.+374    	; 0x5b2 <usbPoll+0x186>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
 43c:	80 91 6f 01 	lds	r24, 0x016F
 440:	cc e0       	ldi	r28, 0x0C	; 12
 442:	d0 e0       	ldi	r29, 0x00	; 0
 444:	c8 1b       	sub	r28, r24
 446:	d1 09       	sbc	r29, r1
 448:	ca 58       	subi	r28, 0x8A	; 138
 44a:	de 4f       	sbci	r29, 0xFE	; 254
    if(usbRxToken < 0x10){  /* OUT to endpoint != 0: endpoint number in usbRxToken */
        usbFunctionWriteOut(data, len);
        return;
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
 44c:	80 91 6e 01 	lds	r24, 0x016E
 450:	8d 32       	cpi	r24, 0x2D	; 45
 452:	09 f0       	breq	.+2      	; 0x456 <usbPoll+0x2a>
 454:	9b c0       	rjmp	.+310    	; 0x58c <usbPoll+0x160>
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
 456:	68 30       	cpi	r22, 0x08	; 8
 458:	09 f0       	breq	.+2      	; 0x45c <usbPoll+0x30>
 45a:	a9 c0       	rjmp	.+338    	; 0x5ae <usbPoll+0x182>
            return;
        usbMsgLen_t replyLen;
        usbTxBuf[0] = USBPID_DATA0;         /* initialize data toggling */
 45c:	83 ec       	ldi	r24, 0xC3	; 195
 45e:	80 93 56 01 	sts	0x0156, r24
        usbTxLen = USBPID_NAK;              /* abort pending transmit */
 462:	8a e5       	ldi	r24, 0x5A	; 90
 464:	80 93 00 01 	sts	0x0100, r24
        usbMsgFlags = 0;
 468:	10 92 36 01 	sts	0x0136, r1
        uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
        if(type != USBRQ_TYPE_STANDARD){    /* standard requests are handled by driver */
 46c:	88 81       	ld	r24, Y
 46e:	80 76       	andi	r24, 0x60	; 96
 470:	29 f0       	breq	.+10     	; 0x47c <usbPoll+0x50>
            replyLen = usbFunctionSetup(data);
 472:	ce 01       	movw	r24, r28
 474:	0e 94 88 03 	call	0x710	; 0x710 <usbFunctionSetup>
 478:	28 2f       	mov	r18, r24
 47a:	75 c0       	rjmp	.+234    	; 0x566 <usbPoll+0x13a>
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
uchar   value = rq->wValue.bytes[0];
 47c:	9a 81       	ldd	r25, Y+2	; 0x02
#if USB_CFG_IMPLEMENT_HALT
uchar   index = rq->wIndex.bytes[0];
#endif

    dataPtr[0] = 0; /* default reply common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
 47e:	10 92 5f 01 	sts	0x015F, r1
    SWITCH_START(rq->bRequest)
 482:	89 81       	ldd	r24, Y+1	; 0x01
    SWITCH_CASE(USBRQ_GET_STATUS)           /* 0 */
 484:	88 23       	and	r24, r24
 486:	21 f4       	brne	.+8      	; 0x490 <usbPoll+0x64>
            dataPtr[0] =  USB_CFG_IS_SELF_POWERED;
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
 488:	10 92 60 01 	sts	0x0160, r1
 48c:	22 e0       	ldi	r18, 0x02	; 2
 48e:	64 c0       	rjmp	.+200    	; 0x558 <usbPoll+0x12c>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
            usbResetDataToggling();
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
 490:	85 30       	cpi	r24, 0x05	; 5
 492:	19 f4       	brne	.+6      	; 0x49a <usbPoll+0x6e>
        usbNewDeviceAddr = value;
 494:	90 93 73 01 	sts	0x0173, r25
 498:	5e c0       	rjmp	.+188    	; 0x556 <usbPoll+0x12a>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
 49a:	86 30       	cpi	r24, 0x06	; 6
 49c:	09 f0       	breq	.+2      	; 0x4a0 <usbPoll+0x74>
 49e:	47 c0       	rjmp	.+142    	; 0x52e <usbPoll+0x102>
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar       flags = USB_FLG_MSGPTR_IS_ROM;

    SWITCH_START(rq->wValue.bytes[1])
 4a0:	8b 81       	ldd	r24, Y+3	; 0x03
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
 4a2:	81 30       	cpi	r24, 0x01	; 1
 4a4:	c9 f1       	breq	.+114    	; 0x518 <usbPoll+0xec>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
 4a6:	82 30       	cpi	r24, 0x02	; 2
 4a8:	31 f4       	brne	.+12     	; 0x4b6 <usbPoll+0x8a>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
 4aa:	ce 01       	movw	r24, r28
 4ac:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <usbFunctionDescriptor>
 4b0:	28 2f       	mov	r18, r24
 4b2:	80 e0       	ldi	r24, 0x00	; 0
 4b4:	39 c0       	rjmp	.+114    	; 0x528 <usbPoll+0xfc>
    SWITCH_CASE(USBDESCR_STRING)    /* 3 */
 4b6:	83 30       	cpi	r24, 0x03	; 3
 4b8:	11 f5       	brne	.+68     	; 0x4fe <usbPoll+0xd2>
#if USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC
        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
            flags = 0;
        len = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
        SWITCH_START(rq->wValue.bytes[0])
 4ba:	8a 81       	ldd	r24, Y+2	; 0x02
        SWITCH_CASE(0)
 4bc:	88 23       	and	r24, r24
 4be:	49 f4       	brne	.+18     	; 0x4d2 <usbPoll+0xa6>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
 4c0:	88 e6       	ldi	r24, 0x68	; 104
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	90 93 71 01 	sts	0x0171, r25
 4c8:	80 93 70 01 	sts	0x0170, r24
 4cc:	80 e4       	ldi	r24, 0x40	; 64
 4ce:	24 e0       	ldi	r18, 0x04	; 4
 4d0:	2b c0       	rjmp	.+86     	; 0x528 <usbPoll+0xfc>
        SWITCH_CASE(1)
 4d2:	81 30       	cpi	r24, 0x01	; 1
 4d4:	49 f4       	brne	.+18     	; 0x4e8 <usbPoll+0xbc>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
 4d6:	8c e6       	ldi	r24, 0x6C	; 108
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	90 93 71 01 	sts	0x0171, r25
 4de:	80 93 70 01 	sts	0x0170, r24
 4e2:	80 e4       	ldi	r24, 0x40	; 64
 4e4:	26 e2       	ldi	r18, 0x26	; 38
 4e6:	20 c0       	rjmp	.+64     	; 0x528 <usbPoll+0xfc>
        SWITCH_CASE(2)
 4e8:	82 30       	cpi	r24, 0x02	; 2
 4ea:	e1 f4       	brne	.+56     	; 0x524 <usbPoll+0xf8>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
 4ec:	82 e9       	ldi	r24, 0x92	; 146
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	90 93 71 01 	sts	0x0171, r25
 4f4:	80 93 70 01 	sts	0x0170, r24
 4f8:	80 e4       	ldi	r24, 0x40	; 64
 4fa:	2e e3       	ldi	r18, 0x3E	; 62
 4fc:	15 c0       	rjmp	.+42     	; 0x528 <usbPoll+0xfc>
                len = usbFunctionDescriptor(rq);
            }
        SWITCH_END
#endif  /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
#if USB_CFG_DESCR_PROPS_HID_REPORT  /* only support HID descriptors if enabled */
    SWITCH_CASE(USBDESCR_HID)       /* 0x21 */
 4fe:	81 32       	cpi	r24, 0x21	; 33
 500:	49 f4       	brne	.+18     	; 0x514 <usbPoll+0xe8>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID, usbDescriptorConfiguration + 18)
 502:	89 e4       	ldi	r24, 0x49	; 73
 504:	91 e0       	ldi	r25, 0x01	; 1
 506:	90 93 71 01 	sts	0x0171, r25
 50a:	80 93 70 01 	sts	0x0170, r24
 50e:	80 e4       	ldi	r24, 0x40	; 64
 510:	29 e0       	ldi	r18, 0x09	; 9
 512:	0a c0       	rjmp	.+20     	; 0x528 <usbPoll+0xfc>
    SWITCH_CASE(USBDESCR_HID_REPORT)/* 0x22 */
 514:	82 32       	cpi	r24, 0x22	; 34
 516:	31 f4       	brne	.+12     	; 0x524 <usbPoll+0xf8>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID_REPORT, usbDescriptorHidReport)
 518:	ce 01       	movw	r24, r28
 51a:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <usbFunctionDescriptor>
 51e:	28 2f       	mov	r18, r24
 520:	80 e4       	ldi	r24, 0x40	; 64
 522:	02 c0       	rjmp	.+4      	; 0x528 <usbPoll+0xfc>
 524:	80 e4       	ldi	r24, 0x40	; 64
 526:	20 e0       	ldi	r18, 0x00	; 0
    SWITCH_DEFAULT
        if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
            len = usbFunctionDescriptor(rq);
        }
    SWITCH_END
    usbMsgFlags = flags;
 528:	80 93 36 01 	sts	0x0136, r24
 52c:	1c c0       	rjmp	.+56     	; 0x566 <usbPoll+0x13a>
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
 52e:	88 30       	cpi	r24, 0x08	; 8
 530:	21 f4       	brne	.+8      	; 0x53a <usbPoll+0x10e>
 532:	21 e0       	ldi	r18, 0x01	; 1
 534:	85 e7       	ldi	r24, 0x75	; 117
 536:	91 e0       	ldi	r25, 0x01	; 1
 538:	11 c0       	rjmp	.+34     	; 0x55c <usbPoll+0x130>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
 53a:	89 30       	cpi	r24, 0x09	; 9
 53c:	19 f4       	brne	.+6      	; 0x544 <usbPoll+0x118>
        usbConfiguration = value;
 53e:	90 93 75 01 	sts	0x0175, r25
 542:	09 c0       	rjmp	.+18     	; 0x556 <usbPoll+0x12a>
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
 544:	8a 30       	cpi	r24, 0x0A	; 10
 546:	11 f4       	brne	.+4      	; 0x54c <usbPoll+0x120>
 548:	21 e0       	ldi	r18, 0x01	; 1
 54a:	06 c0       	rjmp	.+12     	; 0x558 <usbPoll+0x12c>
        len = 1;
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    SWITCH_CASE(USBRQ_SET_INTERFACE)        /* 11 */
 54c:	8b 30       	cpi	r24, 0x0B	; 11
 54e:	19 f4       	brne	.+6      	; 0x556 <usbPoll+0x12a>
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 550:	8b e4       	ldi	r24, 0x4B	; 75
 552:	80 93 62 01 	sts	0x0162, r24
 556:	20 e0       	ldi	r18, 0x00	; 0
 558:	8f e5       	ldi	r24, 0x5F	; 95
 55a:	91 e0       	ldi	r25, 0x01	; 1
        usbResetStall();
#endif
    SWITCH_DEFAULT                          /* 7=SET_DESCRIPTOR, 12=SYNC_FRAME */
        /* Should we add an optional hook here? */
    SWITCH_END
    usbMsgPtr = (usbMsgPtr_t)dataPtr;
 55c:	90 93 71 01 	sts	0x0171, r25
 560:	80 93 70 01 	sts	0x0170, r24
 564:	09 c0       	rjmp	.+18     	; 0x578 <usbPoll+0x14c>
            replyLen = usbFunctionSetup(data);
        }else{
            replyLen = usbDriverSetup(rq);
        }
#if USB_CFG_IMPLEMENT_FN_READ || USB_CFG_IMPLEMENT_FN_WRITE
        if(replyLen == USB_NO_MSG){         /* use user-supplied read/write function */
 566:	2f 3f       	cpi	r18, 0xFF	; 255
 568:	39 f4       	brne	.+14     	; 0x578 <usbPoll+0x14c>
            /* do some conditioning on replyLen, but on IN transfers only */
            if((rq->bmRequestType & USBRQ_DIR_MASK) != USBRQ_DIR_HOST_TO_DEVICE){
 56a:	88 81       	ld	r24, Y
 56c:	87 fd       	sbrc	r24, 7
                if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
                    replyLen = rq->wLength.bytes[0];
 56e:	2e 81       	ldd	r18, Y+6	; 0x06
                }else{
                    replyLen = rq->wLength.word;
                }
            }
            usbMsgFlags = USB_FLG_USE_USER_RW;
 570:	80 e8       	ldi	r24, 0x80	; 128
 572:	80 93 36 01 	sts	0x0136, r24
 576:	06 c0       	rjmp	.+12     	; 0x584 <usbPoll+0x158>
        }else   /* The 'else' prevents that we limit a replyLen of USB_NO_MSG to the maximum transfer len. */
#endif
        if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])    /* limit length to max */
 578:	8f 81       	ldd	r24, Y+7	; 0x07
 57a:	88 23       	and	r24, r24
 57c:	19 f4       	brne	.+6      	; 0x584 <usbPoll+0x158>
 57e:	8e 81       	ldd	r24, Y+6	; 0x06
 580:	82 17       	cp	r24, r18
 582:	08 f0       	brcs	.+2      	; 0x586 <usbPoll+0x15a>
 584:	82 2f       	mov	r24, r18
                replyLen = rq->wLength.bytes[0];
        }else{
            if(replyLen > rq->wLength.word)     /* limit length to max */
                replyLen = rq->wLength.word;
        }
        usbMsgLen = replyLen;
 586:	80 93 01 01 	sts	0x0101, r24
 58a:	11 c0       	rjmp	.+34     	; 0x5ae <usbPoll+0x182>
    }else{  /* usbRxToken must be USBPID_OUT, which means data phase of setup (control-out) */
#if USB_CFG_IMPLEMENT_FN_WRITE
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
 58c:	80 91 36 01 	lds	r24, 0x0136
 590:	87 ff       	sbrs	r24, 7
 592:	0d c0       	rjmp	.+26     	; 0x5ae <usbPoll+0x182>
            uchar rval = usbFunctionWrite(data, len);
 594:	ce 01       	movw	r24, r28
 596:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <usbFunctionWrite>
            if(rval == 0xff){   /* an error occurred */
 59a:	8f 3f       	cpi	r24, 0xFF	; 255
 59c:	21 f4       	brne	.+8      	; 0x5a6 <usbPoll+0x17a>
                usbTxLen = USBPID_STALL;
 59e:	8e e1       	ldi	r24, 0x1E	; 30
 5a0:	80 93 00 01 	sts	0x0100, r24
 5a4:	04 c0       	rjmp	.+8      	; 0x5ae <usbPoll+0x182>
            }else if(rval != 0){    /* This was the final package */
 5a6:	88 23       	and	r24, r24
 5a8:	11 f0       	breq	.+4      	; 0x5ae <usbPoll+0x182>
                usbMsgLen = 0;  /* answer with a zero-sized data packet */
 5aa:	10 92 01 01 	sts	0x0101, r1
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
#if USB_CFG_HAVE_FLOWCONTROL
        if(usbRxLen > 0)    /* only mark as available if not inactivated */
            usbRxLen = 0;
#else
        usbRxLen = 0;       /* mark rx buffer as available */
 5ae:	10 92 72 01 	sts	0x0172, r1
#endif
    }
    if(usbTxLen & 0x10){    /* transmit system idle */
 5b2:	80 91 00 01 	lds	r24, 0x0100
 5b6:	84 ff       	sbrs	r24, 4
 5b8:	4a c0       	rjmp	.+148    	; 0x64e <usbPoll+0x222>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
 5ba:	80 91 01 01 	lds	r24, 0x0101
 5be:	8f 3f       	cpi	r24, 0xFF	; 255
 5c0:	09 f4       	brne	.+2      	; 0x5c4 <usbPoll+0x198>
 5c2:	45 c0       	rjmp	.+138    	; 0x64e <usbPoll+0x222>
 5c4:	18 2f       	mov	r17, r24
 5c6:	89 30       	cpi	r24, 0x09	; 9
 5c8:	08 f0       	brcs	.+2      	; 0x5cc <usbPoll+0x1a0>
 5ca:	18 e0       	ldi	r17, 0x08	; 8
uchar       len;

    wantLen = usbMsgLen;
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
 5cc:	81 1b       	sub	r24, r17
 5ce:	80 93 01 01 	sts	0x0101, r24
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
 5d2:	80 91 56 01 	lds	r24, 0x0156
 5d6:	98 e8       	ldi	r25, 0x88	; 136
 5d8:	89 27       	eor	r24, r25
 5da:	80 93 56 01 	sts	0x0156, r24
/* This function is similar to usbFunctionRead(), but it's also called for
 * data handled automatically by the driver (e.g. descriptor reads).
 */
static uchar usbDeviceRead(uchar *data, uchar len)
{
    if(len > 0){    /* don't bother app with 0 sized reads */
 5de:	11 23       	and	r17, r17
 5e0:	41 f1       	breq	.+80     	; 0x632 <usbPoll+0x206>
            len = usbFunctionRead(data, len);
        }else
#endif
        {
            uchar i = len;
            usbMsgPtr_t r = usbMsgPtr;
 5e2:	20 91 70 01 	lds	r18, 0x0170
 5e6:	30 91 71 01 	lds	r19, 0x0171
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
 5ea:	80 91 36 01 	lds	r24, 0x0136
 5ee:	86 ff       	sbrs	r24, 6
 5f0:	0d c0       	rjmp	.+26     	; 0x60c <usbPoll+0x1e0>
 5f2:	a7 e5       	ldi	r26, 0x57	; 87
 5f4:	b1 e0       	ldi	r27, 0x01	; 1
 5f6:	80 e0       	ldi	r24, 0x00	; 0
 5f8:	90 e0       	ldi	r25, 0x00	; 0
                do{
                    uchar c = USB_READ_FLASH(r);    /* assign to char size variable to enforce byte ops */
 5fa:	f9 01       	movw	r30, r18
 5fc:	e8 0f       	add	r30, r24
 5fe:	f9 1f       	adc	r31, r25
 600:	e4 91       	lpm	r30, Z+
                    *data++ = c;
 602:	ed 93       	st	X+, r30
 604:	01 96       	adiw	r24, 0x01	; 1
                    r++;
                }while(--i);
 606:	18 17       	cp	r17, r24
 608:	c1 f7       	brne	.-16     	; 0x5fa <usbPoll+0x1ce>
 60a:	08 c0       	rjmp	.+16     	; 0x61c <usbPoll+0x1f0>
 60c:	91 2f       	mov	r25, r17
 60e:	d9 01       	movw	r26, r18
 610:	e7 e5       	ldi	r30, 0x57	; 87
 612:	f1 e0       	ldi	r31, 0x01	; 1
            }else{  /* RAM data */
                do{
                    *data++ = *((uchar *)r);
 614:	8d 91       	ld	r24, X+
 616:	81 93       	st	Z+, r24
                    r++;
                }while(--i);
 618:	91 50       	subi	r25, 0x01	; 1
 61a:	e1 f7       	brne	.-8      	; 0x614 <usbPoll+0x1e8>
 61c:	11 50       	subi	r17, 0x01	; 1
 61e:	81 2f       	mov	r24, r17
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	1f 5f       	subi	r17, 0xFF	; 255
 624:	01 96       	adiw	r24, 0x01	; 1
 626:	82 0f       	add	r24, r18
 628:	93 1f       	adc	r25, r19
            }
            usbMsgPtr = r;
 62a:	90 93 71 01 	sts	0x0171, r25
 62e:	80 93 70 01 	sts	0x0170, r24
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
 632:	87 e5       	ldi	r24, 0x57	; 87
 634:	91 e0       	ldi	r25, 0x01	; 1
 636:	61 2f       	mov	r22, r17
 638:	0e 94 cb 00 	call	0x196	; 0x196 <usbCrc16Append>
        len += 4;           /* length including sync byte */
 63c:	61 2f       	mov	r22, r17
 63e:	6c 5f       	subi	r22, 0xFC	; 252
        if(len < 12)        /* a partial package identifies end of message */
 640:	6c 30       	cpi	r22, 0x0C	; 12
 642:	19 f0       	breq	.+6      	; 0x64a <usbPoll+0x21e>
            usbMsgLen = USB_NO_MSG;
 644:	8f ef       	ldi	r24, 0xFF	; 255
 646:	80 93 01 01 	sts	0x0101, r24
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
        usbMsgLen = USB_NO_MSG;
    }
    usbTxLen = len;
 64a:	60 93 00 01 	sts	0x0100, r22
 64e:	94 e1       	ldi	r25, 0x14	; 20
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
        uchar usbLineStatus = USBIN & USBMASK;
 650:	89 b1       	in	r24, 0x09	; 9
        if(usbLineStatus != 0)  /* SE0 has ended */
 652:	85 70       	andi	r24, 0x05	; 5
 654:	31 f4       	brne	.+12     	; 0x662 <usbPoll+0x236>
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
 656:	91 50       	subi	r25, 0x01	; 1
 658:	d9 f7       	brne	.-10     	; 0x650 <usbPoll+0x224>
        uchar usbLineStatus = USBIN & USBMASK;
        if(usbLineStatus != 0)  /* SE0 has ended */
            goto isNotReset;
    }
    /* RESET condition, called multiple times during reset */
    usbNewDeviceAddr = 0;
 65a:	10 92 73 01 	sts	0x0173, r1
    usbDeviceAddr = 0;
 65e:	10 92 6d 01 	sts	0x016D, r1
    usbResetStall();
isNotReset:
    usbHandleResetHook(i);
}
 662:	df 91       	pop	r29
 664:	cf 91       	pop	r28
 666:	1f 91       	pop	r17
 668:	08 95       	ret

0000066a <usbSetInterrupt>:
    usbCrc16Append(&txStatus->buffer[1], len);
    txStatus->len = len + 4;    /* len must be given including sync byte */
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
 66a:	1f 93       	push	r17
 66c:	dc 01       	movw	r26, r24
 66e:	16 2f       	mov	r17, r22

#if USB_CFG_IMPLEMENT_HALT
    if(usbTxLen1 == USBPID_STALL)
        return;
#endif
    if(txStatus->len & 0x10){   /* packet buffer was empty */
 670:	80 91 61 01 	lds	r24, 0x0161
 674:	84 ff       	sbrs	r24, 4
 676:	07 c0       	rjmp	.+14     	; 0x686 <usbSetInterrupt+0x1c>
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
 678:	80 91 62 01 	lds	r24, 0x0162
 67c:	98 e8       	ldi	r25, 0x88	; 136
 67e:	89 27       	eor	r24, r25
 680:	80 93 62 01 	sts	0x0162, r24
 684:	03 c0       	rjmp	.+6      	; 0x68c <usbSetInterrupt+0x22>
    }else{
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
 686:	8a e5       	ldi	r24, 0x5A	; 90
 688:	80 93 61 01 	sts	0x0161, r24
 68c:	91 2f       	mov	r25, r17
 68e:	e3 e6       	ldi	r30, 0x63	; 99
 690:	f1 e0       	ldi	r31, 0x01	; 1
    }
    p = txStatus->buffer + 1;
    i = len;
    do{                         /* if len == 0, we still copy 1 byte, but that's no problem */
        *p++ = *data++;
 692:	8d 91       	ld	r24, X+
 694:	81 93       	st	Z+, r24
    }while(--i > 0);            /* loop control at the end is 2 bytes shorter than at beginning */
 696:	91 50       	subi	r25, 0x01	; 1
 698:	e1 f7       	brne	.-8      	; 0x692 <usbSetInterrupt+0x28>
    usbCrc16Append(&txStatus->buffer[1], len);
 69a:	83 e6       	ldi	r24, 0x63	; 99
 69c:	91 e0       	ldi	r25, 0x01	; 1
 69e:	61 2f       	mov	r22, r17
 6a0:	0e 94 cb 00 	call	0x196	; 0x196 <usbCrc16Append>
    txStatus->len = len + 4;    /* len must be given including sync byte */
 6a4:	1c 5f       	subi	r17, 0xFC	; 252
 6a6:	10 93 61 01 	sts	0x0161, r17
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
    usbGenericSetInterrupt(data, len, &usbTxStatus1);
}
 6aa:	1f 91       	pop	r17
 6ac:	08 95       	ret

000006ae <getUsbDescrDevice_size>:
    0,          /* serial number string index */
#endif
    1,          /* number of configurations */
};

int getUsbDescrDevice_size(void) { return sizeof(usbDescrDevice); }
 6ae:	82 e1       	ldi	r24, 0x12	; 18
 6b0:	90 e0       	ldi	r25, 0x00	; 0
 6b2:	08 95       	ret

000006b4 <usbFunctionDescriptor>:
/* ------------------------------------------------------------------------- */

static uchar    idleRates[MAX_REPORTS];           /* in 4 ms units */

uchar	usbFunctionDescriptor(struct usbRequest *rq)
{
 6b4:	fc 01       	movw	r30, r24
	if ((rq->bmRequestType & USBRQ_TYPE_MASK) != USBRQ_TYPE_STANDARD)
 6b6:	80 81       	ld	r24, Z
 6b8:	80 76       	andi	r24, 0x60	; 96
 6ba:	41 f5       	brne	.+80     	; 0x70c <usbFunctionDescriptor+0x58>
		return 0;

	if (rq->bRequest == USBRQ_GET_DESCRIPTOR)
 6bc:	81 81       	ldd	r24, Z+1	; 0x01
 6be:	86 30       	cpi	r24, 0x06	; 6
 6c0:	29 f5       	brne	.+74     	; 0x70c <usbFunctionDescriptor+0x58>
	{
		// USB spec 9.4.3, high byte is descriptor type
		switch (rq->wValue.bytes[1])
 6c2:	83 81       	ldd	r24, Z+3	; 0x03
 6c4:	82 30       	cpi	r24, 0x02	; 2
 6c6:	d1 f0       	breq	.+52     	; 0x6fc <usbFunctionDescriptor+0x48>
 6c8:	82 32       	cpi	r24, 0x22	; 34
 6ca:	69 f0       	breq	.+26     	; 0x6e6 <usbFunctionDescriptor+0x32>
 6cc:	81 30       	cpi	r24, 0x01	; 1
 6ce:	f1 f4       	brne	.+60     	; 0x70c <usbFunctionDescriptor+0x58>
		{
			case USBDESCR_DEVICE:
				usbMsgPtr = rt_usbDeviceDescriptor;		
 6d0:	80 91 3b 01 	lds	r24, 0x013B
 6d4:	90 91 3c 01 	lds	r25, 0x013C
 6d8:	90 93 71 01 	sts	0x0171, r25
 6dc:	80 93 70 01 	sts	0x0170, r24
				return rt_usbDeviceDescriptorSize;
 6e0:	80 91 3d 01 	lds	r24, 0x013D
 6e4:	08 95       	ret
			case USBDESCR_HID_REPORT:
				usbMsgPtr = rt_usbHidReportDescriptor;
 6e6:	80 91 38 01 	lds	r24, 0x0138
 6ea:	90 91 39 01 	lds	r25, 0x0139
 6ee:	90 93 71 01 	sts	0x0171, r25
 6f2:	80 93 70 01 	sts	0x0170, r24
				return rt_usbHidReportDescriptorSize;
 6f6:	80 91 3a 01 	lds	r24, 0x013A
 6fa:	08 95       	ret
			case USBDESCR_CONFIG:
				usbMsgPtr = my_usbDescriptorConfiguration;
 6fc:	82 e0       	ldi	r24, 0x02	; 2
 6fe:	91 e0       	ldi	r25, 0x01	; 1
 700:	90 93 71 01 	sts	0x0171, r25
 704:	80 93 70 01 	sts	0x0170, r24
 708:	82 e2       	ldi	r24, 0x22	; 34
 70a:	08 95       	ret
				return sizeof(my_usbDescriptorConfiguration);
 70c:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return 0;
}
 70e:	08 95       	ret

00000710 <usbFunctionSetup>:

static uchar setupBuffer[sizeof(reportBuffer)];

uchar	usbFunctionSetup(uchar data[8])
{
	usbRequest_t    *rq = (void *)data;
 710:	dc 01       	movw	r26, r24
	int i;

	usbMsgPtr = setupBuffer;
 712:	2e e4       	ldi	r18, 0x4E	; 78
 714:	31 e0       	ldi	r19, 0x01	; 1
 716:	30 93 71 01 	sts	0x0171, r19
 71a:	20 93 70 01 	sts	0x0170, r18
	
	if((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_CLASS){    /* class request type */
 71e:	8c 91       	ld	r24, X
 720:	80 76       	andi	r24, 0x60	; 96
 722:	80 32       	cpi	r24, 0x20	; 32
 724:	09 f0       	breq	.+2      	; 0x728 <usbFunctionSetup+0x18>
 726:	4a c0       	rjmp	.+148    	; 0x7bc <usbFunctionSetup+0xac>
		switch (rq->bRequest)
 728:	11 96       	adiw	r26, 0x01	; 1
 72a:	8c 91       	ld	r24, X
 72c:	11 97       	sbiw	r26, 0x01	; 1
 72e:	82 30       	cpi	r24, 0x02	; 2
 730:	c9 f0       	breq	.+50     	; 0x764 <usbFunctionSetup+0x54>
 732:	83 30       	cpi	r24, 0x03	; 3
 734:	20 f4       	brcc	.+8      	; 0x73e <usbFunctionSetup+0x2e>
 736:	81 30       	cpi	r24, 0x01	; 1
 738:	09 f0       	breq	.+2      	; 0x73c <usbFunctionSetup+0x2c>
 73a:	40 c0       	rjmp	.+128    	; 0x7bc <usbFunctionSetup+0xac>
 73c:	07 c0       	rjmp	.+14     	; 0x74c <usbFunctionSetup+0x3c>
 73e:	89 30       	cpi	r24, 0x09	; 9
 740:	19 f0       	breq	.+6      	; 0x748 <usbFunctionSetup+0x38>
 742:	8a 30       	cpi	r24, 0x0A	; 10
 744:	d9 f5       	brne	.+118    	; 0x7bc <usbFunctionSetup+0xac>
 746:	1e c0       	rjmp	.+60     	; 0x784 <usbFunctionSetup+0x74>
 748:	8f ef       	ldi	r24, 0xFF	; 255
 74a:	08 95       	ret
		{
			case USBRQ_HID_GET_REPORT:
				/* wValue: ReportType (highbyte), ReportID (lowbyte) */
				return curGamepad->buildReport(setupBuffer, rq->wValue.bytes[0]);
 74c:	e0 91 3e 01 	lds	r30, 0x013E
 750:	f0 91 3f 01 	lds	r31, 0x013F
 754:	00 88       	ldd	r0, Z+16	; 0x10
 756:	f1 89       	ldd	r31, Z+17	; 0x11
 758:	e0 2d       	mov	r30, r0
 75a:	c9 01       	movw	r24, r18
 75c:	12 96       	adiw	r26, 0x02	; 2
 75e:	6c 91       	ld	r22, X
 760:	09 95       	icall
 762:	08 95       	ret

			case USBRQ_HID_SET_REPORT:
				return USB_NO_MSG;  /* use usbFunctionWrite() to receive data from host */

			case USBRQ_HID_GET_IDLE:
				if (rq->wValue.bytes[0] > 0 && rq->wValue.bytes[0] <= MAX_REPORTS) {
 764:	12 96       	adiw	r26, 0x02	; 2
 766:	9c 91       	ld	r25, X
 768:	89 2f       	mov	r24, r25
 76a:	81 50       	subi	r24, 0x01	; 1
 76c:	88 30       	cpi	r24, 0x08	; 8
 76e:	30 f5       	brcc	.+76     	; 0x7bc <usbFunctionSetup+0xac>
					usbMsgPtr = idleRates + (rq->wValue.bytes[0] - 1);
 770:	89 2f       	mov	r24, r25
 772:	90 e0       	ldi	r25, 0x00	; 0
 774:	8b 5b       	subi	r24, 0xBB	; 187
 776:	9e 4f       	sbci	r25, 0xFE	; 254
 778:	90 93 71 01 	sts	0x0171, r25
 77c:	80 93 70 01 	sts	0x0170, r24
 780:	81 e0       	ldi	r24, 0x01	; 1
 782:	08 95       	ret
					return 1;
				}
				break;

			case USBRQ_HID_SET_IDLE:
				if (rq->wValue.bytes[0]==0) {
 784:	12 96       	adiw	r26, 0x02	; 2
 786:	ec 91       	ld	r30, X
 788:	12 97       	sbiw	r26, 0x02	; 2
 78a:	ee 23       	and	r30, r30
 78c:	59 f4       	brne	.+22     	; 0x7a4 <usbFunctionSetup+0x94>
 78e:	e6 e4       	ldi	r30, 0x46	; 70
 790:	f1 e0       	ldi	r31, 0x01	; 1
					for (i=0; i<MAX_REPORTS; i++)
						idleRates[i] = rq->wValue.bytes[1];
 792:	13 96       	adiw	r26, 0x03	; 3
 794:	8c 91       	ld	r24, X
 796:	13 97       	sbiw	r26, 0x03	; 3
 798:	81 93       	st	Z+, r24
				}
				break;

			case USBRQ_HID_SET_IDLE:
				if (rq->wValue.bytes[0]==0) {
					for (i=0; i<MAX_REPORTS; i++)
 79a:	81 e0       	ldi	r24, 0x01	; 1
 79c:	ee 34       	cpi	r30, 0x4E	; 78
 79e:	f8 07       	cpc	r31, r24
 7a0:	c1 f7       	brne	.-16     	; 0x792 <usbFunctionSetup+0x82>
 7a2:	0c c0       	rjmp	.+24     	; 0x7bc <usbFunctionSetup+0xac>
						idleRates[i] = rq->wValue.bytes[1];
				}
				else {
					if (rq->wValue.bytes[0] > 0 && rq->wValue.bytes[0] <= MAX_REPORTS) {
 7a4:	8e 2f       	mov	r24, r30
 7a6:	81 50       	subi	r24, 0x01	; 1
 7a8:	88 30       	cpi	r24, 0x08	; 8
 7aa:	40 f4       	brcc	.+16     	; 0x7bc <usbFunctionSetup+0xac>
						idleRates[rq->wValue.bytes[0]-1] = rq->wValue.bytes[1];
 7ac:	f0 e0       	ldi	r31, 0x00	; 0
 7ae:	eb 5b       	subi	r30, 0xBB	; 187
 7b0:	fe 4f       	sbci	r31, 0xFE	; 254
 7b2:	13 96       	adiw	r26, 0x03	; 3
 7b4:	8c 91       	ld	r24, X
 7b6:	80 83       	st	Z, r24
 7b8:	80 e0       	ldi	r24, 0x00	; 0
 7ba:	08 95       	ret
 7bc:	80 e0       	ldi	r24, 0x00	; 0
				}
				break;
		}
	}
	return 0;
}
 7be:	08 95       	ret

000007c0 <usbFunctionWrite>:

/* usbFunctionWrite() is called when the host sends a chunk of data to the
 * device. For more information see the documentation in usbdrv/usbdrv.h.
 */
uchar   usbFunctionWrite(uchar *data, uchar len)
{
 7c0:	fc 01       	movw	r30, r24
	if(data[0]==0x5A)
 7c2:	80 81       	ld	r24, Z
 7c4:	8a 35       	cpi	r24, 0x5A	; 90
 7c6:	19 f4       	brne	.+6      	; 0x7ce <usbFunctionWrite+0xe>
		jumptobootloader=1;
 7c8:	81 e0       	ldi	r24, 0x01	; 1
 7ca:	80 93 8c 01 	sts	0x018C, r24
    return len;
}
 7ce:	86 2f       	mov	r24, r22
 7d0:	08 95       	ret

000007d2 <main>:

__attribute__ ((OS_main)) int main(void)
{
 7d2:	cd b7       	in	r28, 0x3d	; 61
 7d4:	de b7       	in	r29, 0x3e	; 62
 7d6:	28 97       	sbiw	r28, 0x08	; 8
 7d8:	de bf       	out	0x3e, r29	; 62
 7da:	cd bf       	out	0x3d, r28	; 61
	char must_report = 0;//, first_run = 1;
	uchar idleCounters[MAX_REPORTS];
	int i;

	jumptobootloader=0;
 7dc:	10 92 8c 01 	sts	0x018C, r1

	memset(idleCounters, 0, MAX_REPORTS);
 7e0:	88 e0       	ldi	r24, 0x08	; 8
 7e2:	fe 01       	movw	r30, r28
 7e4:	31 96       	adiw	r30, 0x01	; 1
 7e6:	df 01       	movw	r26, r30
 7e8:	98 2f       	mov	r25, r24
 7ea:	1d 92       	st	X+, r1
 7ec:	9a 95       	dec	r25
 7ee:	e9 f7       	brne	.-6      	; 0x7ea <main+0x18>
	memset(idleRates, 0, MAX_REPORTS); // infinity
 7f0:	e6 e4       	ldi	r30, 0x46	; 70
 7f2:	f1 e0       	ldi	r31, 0x01	; 1
 7f4:	df 01       	movw	r26, r30
 7f6:	1d 92       	st	X+, r1
 7f8:	8a 95       	dec	r24
 7fa:	e9 f7       	brne	.-6      	; 0x7f6 <main+0x24>

	curGamepad = atariStyleGetGamepad();
 7fc:	0e 94 72 05 	call	0xae4	; 0xae4 <atariStyleGetGamepad>
 800:	fc 01       	movw	r30, r24
 802:	90 93 3f 01 	sts	0x013F, r25
 806:	80 93 3e 01 	sts	0x013E, r24

	// configure report descriptor according to
	// the current gamepad
	rt_usbHidReportDescriptor = curGamepad->reportDescriptor;
 80a:	84 81       	ldd	r24, Z+4	; 0x04
 80c:	95 81       	ldd	r25, Z+5	; 0x05
 80e:	90 93 39 01 	sts	0x0139, r25
 812:	80 93 38 01 	sts	0x0138, r24
	rt_usbHidReportDescriptorSize = curGamepad->reportDescriptorSize;
 816:	82 81       	ldd	r24, Z+2	; 0x02
 818:	80 93 3a 01 	sts	0x013A, r24

	if (curGamepad->deviceDescriptor != 0)
 81c:	80 85       	ldd	r24, Z+8	; 0x08
 81e:	91 85       	ldd	r25, Z+9	; 0x09
 820:	00 97       	sbiw	r24, 0x00	; 0
 822:	31 f0       	breq	.+12     	; 0x830 <main+0x5e>
	{
		rt_usbDeviceDescriptor = (void*)curGamepad->deviceDescriptor;
 824:	90 93 3c 01 	sts	0x013C, r25
 828:	80 93 3b 01 	sts	0x013B, r24
		rt_usbDeviceDescriptorSize = curGamepad->deviceDescriptorSize;
 82c:	86 81       	ldd	r24, Z+6	; 0x06
 82e:	08 c0       	rjmp	.+16     	; 0x840 <main+0x6e>
	}
	else
	{
		// use descriptor from devdesc.c
		//
		rt_usbDeviceDescriptor = (void*)usbDescrDevice;
 830:	80 ed       	ldi	r24, 0xD0	; 208
 832:	90 e0       	ldi	r25, 0x00	; 0
 834:	90 93 3c 01 	sts	0x013C, r25
 838:	80 93 3b 01 	sts	0x013B, r24
		rt_usbDeviceDescriptorSize = getUsbDescrDevice_size();
 83c:	0e 94 57 03 	call	0x6ae	; 0x6ae <getUsbDescrDevice_size>
 840:	80 93 3d 01 	sts	0x013D, r24
	}

	// patch the config descriptor with the HID report descriptor size
	my_usbDescriptorConfiguration[25] = rt_usbHidReportDescriptorSize;
 844:	80 91 3a 01 	lds	r24, 0x013A
 848:	80 93 1b 01 	sts	0x011B, r24

	wdt_enable(WDTO_2S);
 84c:	2f e0       	ldi	r18, 0x0F	; 15
 84e:	88 e1       	ldi	r24, 0x18	; 24
 850:	90 e0       	ldi	r25, 0x00	; 0
 852:	0f b6       	in	r0, 0x3f	; 63
 854:	f8 94       	cli
 856:	a8 95       	wdr
 858:	80 93 60 00 	sts	0x0060, r24
 85c:	0f be       	out	0x3f, r0	; 63
 85e:	20 93 60 00 	sts	0x0060, r18
	 * PB5   = PIN7 = VCC 	(O,1)
	 * PD7   = PIN8 = GND	(O,0)
	 * PC0&2 = PIN9 = BUT2	(I,1)
	 */
	
	DDRB &= ~((1<<PB0)|(1<<PB1)|(1<<PB2)|(1<<PB3)|(1<<PB4));
 862:	84 b1       	in	r24, 0x04	; 4
 864:	80 7e       	andi	r24, 0xE0	; 224
 866:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1<<PB5);
 868:	25 9a       	sbi	0x04, 5	; 4
	DDRD |= (1<<PD7);
 86a:	57 9a       	sbi	0x0a, 7	; 10

	PORTB |= ((1<<PB0)|(1<<PB1)|(1<<PB2)|(1<<PB3)|(1<<PB4)|(1<<PB5));
 86c:	85 b1       	in	r24, 0x05	; 5
 86e:	8f 63       	ori	r24, 0x3F	; 63
 870:	85 b9       	out	0x05, r24	; 5
	PORTD &= ~(1<<PD7);
 872:	5f 98       	cbi	0x0b, 7	; 11

	DDRC &= ~((1<<PC0)|(1<<PC1)|(1<<PC2)|(1<<PC3));
 874:	87 b1       	in	r24, 0x07	; 7
 876:	80 7f       	andi	r24, 0xF0	; 240
 878:	87 b9       	out	0x07, r24	; 7
	PORTC |= ((1<<PC0)|(1<<PC1)|(1<<PC2)|(1<<PC3));
 87a:	88 b1       	in	r24, 0x08	; 8
 87c:	8f 60       	ori	r24, 0x0F	; 15
 87e:	88 b9       	out	0x08, r24	; 8

	/* Usb pin are init as outputs */  
	DDRD |= ((1<<PD0)|(1<<PD2));   
 880:	8a b1       	in	r24, 0x0a	; 10
 882:	85 60       	ori	r24, 0x05	; 5
 884:	8a b9       	out	0x0a, r24	; 10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 886:	80 e3       	ldi	r24, 0x30	; 48
 888:	95 e7       	ldi	r25, 0x75	; 117
 88a:	01 97       	sbiw	r24, 0x01	; 1
 88c:	f1 f7       	brne	.-4      	; 0x88a <main+0xb8>

	_delay_ms(10);	// 10ms is enough to see the USB disconnection and reconnection

	/* remove USB reset condition */
	DDRD &= ~((1<<PD0)|(1<<PD2));
 88e:	8a b1       	in	r24, 0x0a	; 10
 890:	8a 7f       	andi	r24, 0xFA	; 250
 892:	8a b9       	out	0x0a, r24	; 10

	/* configure timer 0 for a rate of 12M/(1024 * 256) = 45.78 Hz (~22ms) */
	TCCR0B = (1<<CS02)|(1<<CS00);
 894:	85 e0       	ldi	r24, 0x05	; 5
 896:	85 bd       	out	0x25, r24	; 37
	// patch the config descriptor with the HID report descriptor size
	my_usbDescriptorConfiguration[25] = rt_usbHidReportDescriptorSize;

	wdt_enable(WDTO_2S);
	hardwareInit();
	set_sleep_mode(SLEEP_MODE_IDLE);
 898:	83 b7       	in	r24, 0x33	; 51
 89a:	81 7f       	andi	r24, 0xF1	; 241
 89c:	83 bf       	out	0x33, r24	; 51

	curGamepad->init();
 89e:	e0 91 3e 01 	lds	r30, 0x013E
 8a2:	f0 91 3f 01 	lds	r31, 0x013F
 8a6:	02 84       	ldd	r0, Z+10	; 0x0a
 8a8:	f3 85       	ldd	r31, Z+11	; 0x0b
 8aa:	e0 2d       	mov	r30, r0
 8ac:	09 95       	icall
	
	usbInit();
 8ae:	0e 94 09 02 	call	0x412	; 0x412 <usbInit>
	sei();
 8b2:	78 94       	sei

		/* Try to report at the granularity requested by
		 * the host */
		if(TIFR0 & (1<<TOV0))  /* 22 ms timer */
		{
			TIFR0 = 1<<TOV0;
 8b4:	99 24       	eor	r9, r9
 8b6:	93 94       	inc	r9
			for (i=0; i<curGamepad->num_reports; i++) 
 8b8:	5e 01       	movw	r10, r28
 8ba:	08 94       	sec
 8bc:	a1 1c       	adc	r10, r1
 8be:	b1 1c       	adc	r11, r1
					if(idleCounters[i] > 4){
						idleCounters[i] -= 5;   /* 22 ms in units of 4 ms */
					}else{
						// reset the counter and schedule a report for this
						idleCounters[i] = idleRates[i];
						must_report |= (1<<i);
 8c0:	81 e0       	ldi	r24, 0x01	; 1
 8c2:	c8 2e       	mov	r12, r24
 8c4:	d1 2c       	mov	r13, r1
	
	usbInit();
	sei();
	
	for(;;){	/* main event loop */
		wdt_reset();
 8c6:	a8 95       	wdr
		if(jumptobootloader)
 8c8:	80 91 8c 01 	lds	r24, 0x018C
 8cc:	88 23       	and	r24, r24
 8ce:	59 f0       	breq	.+22     	; 0x8e6 <main+0x114>
		{
			cli(); // Clear interrupts
 8d0:	f8 94       	cli
			/* magic boot key in memory to invoke reflashing 0x013B-0x013C = BEEF */
			unsigned int *BootKey=(unsigned int*)0x013b;
			*BootKey=0xBEEF;
 8d2:	8f ee       	ldi	r24, 0xEF	; 239
 8d4:	9e eb       	ldi	r25, 0xBE	; 190
 8d6:	90 93 3c 01 	sts	0x013C, r25
 8da:	80 93 3b 01 	sts	0x013B, r24

			/* USB disconnect */  
			DDRD |= ((1<<PD0)|(1<<PD2));
 8de:	8a b1       	in	r24, 0x0a	; 10
 8e0:	85 60       	ori	r24, 0x05	; 5
 8e2:	8a b9       	out	0x0a, r24	; 10
 8e4:	ff cf       	rjmp	.-2      	; 0x8e4 <main+0x112>
			for(;;); // Let wdt reset the CPU
		}

		// this must be called at each 50 ms or less
		usbPoll();
 8e6:	0e 94 16 02 	call	0x42c	; 0x42c <usbPoll>

		/* Try to report at the granularity requested by
		 * the host */
		if(TIFR0 & (1<<TOV0))  /* 22 ms timer */
 8ea:	a8 99       	sbic	0x15, 0	; 21
 8ec:	02 c0       	rjmp	.+4      	; 0x8f2 <main+0x120>
 8ee:	ff 24       	eor	r15, r15
 8f0:	28 c0       	rjmp	.+80     	; 0x942 <__stack+0x43>
		{
			TIFR0 = 1<<TOV0;
 8f2:	95 ba       	out	0x15, r9	; 21
			for (i=0; i<curGamepad->num_reports; i++) 
 8f4:	40 91 3e 01 	lds	r20, 0x013E
 8f8:	50 91 3f 01 	lds	r21, 0x013F
 8fc:	d5 01       	movw	r26, r10
 8fe:	ff 24       	eor	r15, r15
 900:	20 e0       	ldi	r18, 0x00	; 0
 902:	30 e0       	ldi	r19, 0x00	; 0
 904:	18 c0       	rjmp	.+48     	; 0x936 <__stack+0x37>
			{
				if(idleRates[i] != 0)
 906:	f9 01       	movw	r30, r18
 908:	ea 5b       	subi	r30, 0xBA	; 186
 90a:	fe 4f       	sbci	r31, 0xFE	; 254
 90c:	e0 81       	ld	r30, Z
 90e:	ee 23       	and	r30, r30
 910:	79 f0       	breq	.+30     	; 0x930 <__stack+0x31>
				{
					if(idleCounters[i] > 4){
 912:	8c 91       	ld	r24, X
 914:	85 30       	cpi	r24, 0x05	; 5
 916:	18 f0       	brcs	.+6      	; 0x91e <__stack+0x1f>
						idleCounters[i] -= 5;   /* 22 ms in units of 4 ms */
 918:	85 50       	subi	r24, 0x05	; 5
 91a:	8c 93       	st	X, r24
 91c:	09 c0       	rjmp	.+18     	; 0x930 <__stack+0x31>
					}else{
						// reset the counter and schedule a report for this
						idleCounters[i] = idleRates[i];
 91e:	ec 93       	st	X, r30
						must_report |= (1<<i);
 920:	c6 01       	movw	r24, r12
 922:	02 2e       	mov	r0, r18
 924:	02 c0       	rjmp	.+4      	; 0x92a <__stack+0x2b>
 926:	88 0f       	add	r24, r24
 928:	99 1f       	adc	r25, r25
 92a:	0a 94       	dec	r0
 92c:	e2 f7       	brpl	.-8      	; 0x926 <__stack+0x27>
 92e:	f8 2a       	or	r15, r24
		/* Try to report at the granularity requested by
		 * the host */
		if(TIFR0 & (1<<TOV0))  /* 22 ms timer */
		{
			TIFR0 = 1<<TOV0;
			for (i=0; i<curGamepad->num_reports; i++) 
 930:	2f 5f       	subi	r18, 0xFF	; 255
 932:	3f 4f       	sbci	r19, 0xFF	; 255
 934:	11 96       	adiw	r26, 0x01	; 1
 936:	fa 01       	movw	r30, r20
 938:	80 81       	ld	r24, Z
 93a:	91 81       	ldd	r25, Z+1	; 0x01
 93c:	28 17       	cp	r18, r24
 93e:	39 07       	cpc	r19, r25
 940:	14 f3       	brlt	.-60     	; 0x906 <__stack+0x7>
 942:	00 e0       	ldi	r16, 0x00	; 0
 944:	10 e0       	ldi	r17, 0x00	; 0
 946:	12 c0       	rjmp	.+36     	; 0x96c <__stack+0x6d>
			}
		}

		/* Check what will have to be reported */
		for (i=0; i<curGamepad->num_reports; i++) {
			if (curGamepad->changed(i+1)) {
 948:	06 84       	ldd	r0, Z+14	; 0x0e
 94a:	f7 85       	ldd	r31, Z+15	; 0x0f
 94c:	e0 2d       	mov	r30, r0
 94e:	80 2f       	mov	r24, r16
 950:	8f 5f       	subi	r24, 0xFF	; 255
 952:	09 95       	icall
 954:	88 23       	and	r24, r24
 956:	41 f0       	breq	.+16     	; 0x968 <__stack+0x69>
				must_report |= (1<<i);
 958:	c6 01       	movw	r24, r12
 95a:	00 2e       	mov	r0, r16
 95c:	02 c0       	rjmp	.+4      	; 0x962 <__stack+0x63>
 95e:	88 0f       	add	r24, r24
 960:	99 1f       	adc	r25, r25
 962:	0a 94       	dec	r0
 964:	e2 f7       	brpl	.-8      	; 0x95e <__stack+0x5f>
 966:	f8 2a       	or	r15, r24
				}
			}
		}

		/* Check what will have to be reported */
		for (i=0; i<curGamepad->num_reports; i++) {
 968:	0f 5f       	subi	r16, 0xFF	; 255
 96a:	1f 4f       	sbci	r17, 0xFF	; 255
 96c:	e0 91 3e 01 	lds	r30, 0x013E
 970:	f0 91 3f 01 	lds	r31, 0x013F
 974:	80 81       	ld	r24, Z
 976:	91 81       	ldd	r25, Z+1	; 0x01
 978:	08 17       	cp	r16, r24
 97a:	19 07       	cpc	r17, r25
 97c:	2c f3       	brlt	.-54     	; 0x948 <__stack+0x49>
			if (curGamepad->changed(i+1)) {
				must_report |= (1<<i);
			}
		}
			
		if(must_report)
 97e:	ff 20       	and	r15, r15
 980:	09 f4       	brne	.+2      	; 0x984 <__stack+0x85>
 982:	a1 cf       	rjmp	.-190    	; 0x8c6 <main+0xf4>
 984:	00 e0       	ldi	r16, 0x00	; 0
 986:	10 e0       	ldi	r17, 0x00	; 0
		{
			for (i=0; i<curGamepad->num_reports; i++)
			{
				if ((must_report & (1<<i)) == 0)
 988:	ef 2c       	mov	r14, r15
 98a:	ff 24       	eor	r15, r15
 98c:	24 c0       	rjmp	.+72     	; 0x9d6 <__stack+0xd7>
 98e:	c7 01       	movw	r24, r14
 990:	00 2e       	mov	r0, r16
 992:	02 c0       	rjmp	.+4      	; 0x998 <__stack+0x99>
 994:	95 95       	asr	r25
 996:	87 95       	ror	r24
 998:	0a 94       	dec	r0
 99a:	e2 f7       	brpl	.-8      	; 0x994 <__stack+0x95>
 99c:	80 ff       	sbrs	r24, 0
 99e:	19 c0       	rjmp	.+50     	; 0x9d2 <__stack+0xd3>
					continue;

				if (usbInterruptIsReady())
 9a0:	80 91 61 01 	lds	r24, 0x0161
 9a4:	84 ff       	sbrs	r24, 4
 9a6:	15 c0       	rjmp	.+42     	; 0x9d2 <__stack+0xd3>
				{
					char len;

					len = curGamepad->buildReport(reportBuffer, i+1);
 9a8:	60 2f       	mov	r22, r16
 9aa:	6f 5f       	subi	r22, 0xFF	; 255
 9ac:	00 88       	ldd	r0, Z+16	; 0x10
 9ae:	f1 89       	ldd	r31, Z+17	; 0x11
 9b0:	e0 2d       	mov	r30, r0
 9b2:	80 e4       	ldi	r24, 0x40	; 64
 9b4:	91 e0       	ldi	r25, 0x01	; 1
 9b6:	09 95       	icall
 9b8:	68 2f       	mov	r22, r24
					usbSetInterrupt(reportBuffer, len);
 9ba:	80 e4       	ldi	r24, 0x40	; 64
 9bc:	91 e0       	ldi	r25, 0x01	; 1
 9be:	0e 94 35 03 	call	0x66a	; 0x66a <usbSetInterrupt>
 9c2:	03 c0       	rjmp	.+6      	; 0x9ca <__stack+0xcb>

					while (!usbInterruptIsReady())
					{
						usbPoll();
 9c4:	0e 94 16 02 	call	0x42c	; 0x42c <usbPoll>
						wdt_reset();
 9c8:	a8 95       	wdr
					char len;

					len = curGamepad->buildReport(reportBuffer, i+1);
					usbSetInterrupt(reportBuffer, len);

					while (!usbInterruptIsReady())
 9ca:	80 91 61 01 	lds	r24, 0x0161
 9ce:	84 ff       	sbrs	r24, 4
 9d0:	f9 cf       	rjmp	.-14     	; 0x9c4 <__stack+0xc5>
			}
		}
			
		if(must_report)
		{
			for (i=0; i<curGamepad->num_reports; i++)
 9d2:	0f 5f       	subi	r16, 0xFF	; 255
 9d4:	1f 4f       	sbci	r17, 0xFF	; 255
 9d6:	e0 91 3e 01 	lds	r30, 0x013E
 9da:	f0 91 3f 01 	lds	r31, 0x013F
 9de:	80 81       	ld	r24, Z
 9e0:	91 81       	ldd	r25, Z+1	; 0x01
 9e2:	08 17       	cp	r16, r24
 9e4:	19 07       	cpc	r17, r25
 9e6:	0c f0       	brlt	.+2      	; 0x9ea <__stack+0xeb>
 9e8:	6e cf       	rjmp	.-292    	; 0x8c6 <main+0xf4>
 9ea:	d1 cf       	rjmp	.-94     	; 0x98e <__stack+0x8f>

000009ec <atariStyleInit>:
	 * PB5   = PIN7 = VCC 	(O,1)
	 * PD7   = PIN8 = GND	(O,0)
	 * PC0&2 = PIN9 = BUT2	(I,1) PCINT10
	 */
	
	DDRB &= ~((1<<PB0)|(1<<PB1)|(1<<PB2)|(1<<PB3)|(1<<PB4));
 9ec:	84 b1       	in	r24, 0x04	; 4
 9ee:	80 7e       	andi	r24, 0xE0	; 224
 9f0:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1<<PB5);
 9f2:	25 9a       	sbi	0x04, 5	; 4
	DDRD |= (1<<PD7);
 9f4:	57 9a       	sbi	0x0a, 7	; 10

	PORTB |= ((1<<PB0)|(1<<PB1)|(1<<PB2)|(1<<PB3)|(1<<PB4)|(1<<PB5));
 9f6:	85 b1       	in	r24, 0x05	; 5
 9f8:	8f 63       	ori	r24, 0x3F	; 63
 9fa:	85 b9       	out	0x05, r24	; 5
	PORTD &= ~(1<<PD7);
 9fc:	5f 98       	cbi	0x0b, 7	; 11

	DDRC &= ~((1<<PC0)|(1<<PC1)|(1<<PC2)|(1<<PC3));
 9fe:	87 b1       	in	r24, 0x07	; 7
 a00:	80 7f       	andi	r24, 0xF0	; 240
 a02:	87 b9       	out	0x07, r24	; 7
	PORTC |= ((1<<PC0)|(1<<PC1)|(1<<PC2)|(1<<PC3));
 a04:	88 b1       	in	r24, 0x08	; 8
 a06:	8f 60       	ori	r24, 0x0F	; 15
 a08:	88 b9       	out	0x08, r24	; 8
	
	PCICR |= ((1<<PCIE0)|(1<<PCIE1)); // Enable interrupts on PCINT0 and 1
 a0a:	e8 e6       	ldi	r30, 0x68	; 104
 a0c:	f0 e0       	ldi	r31, 0x00	; 0
 a0e:	80 81       	ld	r24, Z
 a10:	83 60       	ori	r24, 0x03	; 3
 a12:	80 83       	st	Z, r24
	PCMSK0 |= ((1<<PCINT0)|(1<<PCINT1)|(1<<PCINT2)|(1<<PCINT3)|(1<<PCINT4)); // Enable interrupts on PB0 to PB4 change
 a14:	eb e6       	ldi	r30, 0x6B	; 107
 a16:	f0 e0       	ldi	r31, 0x00	; 0
 a18:	80 81       	ld	r24, Z
 a1a:	8f 61       	ori	r24, 0x1F	; 31
 a1c:	80 83       	st	Z, r24
	PCMSK1 |= ((1<<PCINT10)|(1<<PCINT11)); // Enable interrupts on PC2 and PC3 change
 a1e:	ec e6       	ldi	r30, 0x6C	; 108
 a20:	f0 e0       	ldi	r31, 0x00	; 0
 a22:	80 81       	ld	r24, Z
 a24:	8c 60       	ori	r24, 0x0C	; 12
 a26:	80 83       	st	Z, r24

	return 0;
}
 a28:	80 e0       	ldi	r24, 0x00	; 0
 a2a:	08 95       	ret

00000a2c <__vector_3>:

ISR(PCINT1_vect,ISR_ALIASOF(PCINT0_vect));

ISR(PCINT0_vect) // Trigged whenever a change occur on the joystick
{
 a2c:	1f 92       	push	r1
 a2e:	0f 92       	push	r0
 a30:	0f b6       	in	r0, 0x3f	; 63
 a32:	0f 92       	push	r0
 a34:	11 24       	eor	r1, r1
 a36:	2f 93       	push	r18
 a38:	8f 93       	push	r24
 a3a:	9f 93       	push	r25
	last_update_state = ((PINB&0x1F) | ((PINC&0x0C)<<3));
 a3c:	23 b1       	in	r18, 0x03	; 3
 a3e:	86 b1       	in	r24, 0x06	; 6
 a40:	90 e0       	ldi	r25, 0x00	; 0
 a42:	8c 70       	andi	r24, 0x0C	; 12
 a44:	90 70       	andi	r25, 0x00	; 0
 a46:	88 0f       	add	r24, r24
 a48:	99 1f       	adc	r25, r25
 a4a:	88 0f       	add	r24, r24
 a4c:	99 1f       	adc	r25, r25
 a4e:	88 0f       	add	r24, r24
 a50:	99 1f       	adc	r25, r25
 a52:	2f 71       	andi	r18, 0x1F	; 31
 a54:	28 2b       	or	r18, r24
 a56:	20 93 54 01 	sts	0x0154, r18
}
 a5a:	9f 91       	pop	r25
 a5c:	8f 91       	pop	r24
 a5e:	2f 91       	pop	r18
 a60:	0f 90       	pop	r0
 a62:	0f be       	out	0x3f, r0	; 63
 a64:	0f 90       	pop	r0
 a66:	1f 90       	pop	r1
 a68:	18 95       	reti

00000a6a <atariStyleChanged>:

static char atariStyleChanged(char id)
{
 a6a:	20 e0       	ldi	r18, 0x00	; 0
 a6c:	90 91 54 01 	lds	r25, 0x0154
 a70:	80 91 55 01 	lds	r24, 0x0155
 a74:	98 13       	cpse	r25, r24
 a76:	21 e0       	ldi	r18, 0x01	; 1
	return (last_update_state != last_reported_state);
}
 a78:	82 2f       	mov	r24, r18
 a7a:	08 95       	ret

00000a7c <atariStyleBuildReport>:

#define REPORT_SIZE 3

static char atariStyleBuildReport(unsigned char *reportBuffer, char id)
{
 a7c:	fc 01       	movw	r30, r24
	int x,y;
	unsigned char tmp;
	
	if (reportBuffer)
 a7e:	00 97       	sbiw	r24, 0x00	; 0
 a80:	59 f1       	breq	.+86     	; 0xad8 <atariStyleBuildReport+0x5c>
	{
		y = x = 0x80;

		tmp = last_update_state ^ 0xff;
		
		if (tmp&(1<<PB3)) { x = 0xff; }
 a82:	80 91 54 01 	lds	r24, 0x0154
 a86:	80 95       	com	r24
 a88:	48 2f       	mov	r20, r24
 a8a:	43 fd       	sbrc	r20, 3
 a8c:	03 c0       	rjmp	.+6      	; 0xa94 <atariStyleBuildReport+0x18>
 a8e:	20 e8       	ldi	r18, 0x80	; 128
 a90:	30 e0       	ldi	r19, 0x00	; 0
 a92:	02 c0       	rjmp	.+4      	; 0xa98 <atariStyleBuildReport+0x1c>
 a94:	2f ef       	ldi	r18, 0xFF	; 255
 a96:	30 e0       	ldi	r19, 0x00	; 0
		if (tmp&(1<<PB2)) { x = 0x00; }
 a98:	42 ff       	sbrs	r20, 2
 a9a:	02 c0       	rjmp	.+4      	; 0xaa0 <atariStyleBuildReport+0x24>
 a9c:	20 e0       	ldi	r18, 0x00	; 0
 a9e:	30 e0       	ldi	r19, 0x00	; 0
		if (tmp&(1<<PB1)) { y = 0xff; }
 aa0:	41 fd       	sbrc	r20, 1
 aa2:	03 c0       	rjmp	.+6      	; 0xaaa <atariStyleBuildReport+0x2e>
 aa4:	80 e8       	ldi	r24, 0x80	; 128
 aa6:	90 e0       	ldi	r25, 0x00	; 0
 aa8:	02 c0       	rjmp	.+4      	; 0xaae <atariStyleBuildReport+0x32>
 aaa:	8f ef       	ldi	r24, 0xFF	; 255
 aac:	90 e0       	ldi	r25, 0x00	; 0
		if (tmp&(1<<PB0)) { y = 0x00; }
 aae:	40 ff       	sbrs	r20, 0
 ab0:	02 c0       	rjmp	.+4      	; 0xab6 <atariStyleBuildReport+0x3a>
 ab2:	80 e0       	ldi	r24, 0x00	; 0
 ab4:	90 e0       	ldi	r25, 0x00	; 0

		reportBuffer[0] = x;
 ab6:	20 83       	st	Z, r18
		reportBuffer[1] = y;
 ab8:	81 83       	std	Z+1, r24	; 0x01
		reportBuffer[2] = 0;
 aba:	12 82       	std	Z+2, r1	; 0x02
		if (tmp&(1<<PB4)) reportBuffer[2] |= 0x01;
 abc:	44 ff       	sbrs	r20, 4
 abe:	02 c0       	rjmp	.+4      	; 0xac4 <atariStyleBuildReport+0x48>
 ac0:	81 e0       	ldi	r24, 0x01	; 1
 ac2:	82 83       	std	Z+2, r24	; 0x02
		if (tmp&(1<<5)) reportBuffer[2] |= 0x02;
 ac4:	45 ff       	sbrs	r20, 5
 ac6:	03 c0       	rjmp	.+6      	; 0xace <atariStyleBuildReport+0x52>
 ac8:	82 81       	ldd	r24, Z+2	; 0x02
 aca:	82 60       	ori	r24, 0x02	; 2
 acc:	82 83       	std	Z+2, r24	; 0x02
		if (tmp&(1<<6)) reportBuffer[2] |= 0x04;
 ace:	46 ff       	sbrs	r20, 6
 ad0:	03 c0       	rjmp	.+6      	; 0xad8 <atariStyleBuildReport+0x5c>
 ad2:	82 81       	ldd	r24, Z+2	; 0x02
 ad4:	84 60       	ori	r24, 0x04	; 4
 ad6:	82 83       	std	Z+2, r24	; 0x02
	}

	last_reported_state = last_update_state;
 ad8:	80 91 54 01 	lds	r24, 0x0154
 adc:	80 93 55 01 	sts	0x0155, r24

	return REPORT_SIZE;
}
 ae0:	83 e0       	ldi	r24, 0x03	; 3
 ae2:	08 95       	ret

00000ae4 <atariStyleGetGamepad>:
	.buildReport			=	atariStyleBuildReport,
};

Gamepad *atariStyleGetGamepad(void)
{
	atariStyleJoy.reportDescriptor = (void*)atariStyle_usbHidReportDescriptor;
 ae4:	82 ee       	ldi	r24, 0xE2	; 226
 ae6:	90 e0       	ldi	r25, 0x00	; 0
 ae8:	90 93 29 01 	sts	0x0129, r25
 aec:	80 93 28 01 	sts	0x0128, r24
	atariStyleJoy.deviceDescriptor = (void*)atariStyle_usbDescrDevice;
 af0:	8b e1       	ldi	r24, 0x1B	; 27
 af2:	91 e0       	ldi	r25, 0x01	; 1
 af4:	90 93 2d 01 	sts	0x012D, r25
 af8:	80 93 2c 01 	sts	0x012C, r24

	return &atariStyleJoy;
}
 afc:	84 e2       	ldi	r24, 0x24	; 36
 afe:	91 e0       	ldi	r25, 0x01	; 1
 b00:	08 95       	ret

00000b02 <_exit>:
 b02:	f8 94       	cli

00000b04 <__stop_program>:
 b04:	ff cf       	rjmp	.-2      	; 0xb04 <__stop_program>
